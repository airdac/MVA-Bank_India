Phi = cor(dcon,Psi)
View(Phi)
#select your axis
X<-Phi[,eje1]
Y<-Phi[,eje2]
plot(Psi[,eje1],Psi[,eje2],type="n")
axis(side=1, pos= 0, labels = F)
axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.7)
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
library(dplyr)
library(tidyverse)
library(skimr)
library(VIM)
library(mice)
library(cluster)
require(StatMatch)
data <- read.csv("reduced_data_sample.csv")
names(data) <- c("id", "target", "contract", "gender", "car", "n_child",
"income", "credit", "loan", "price", "job_stat", "studies",
"family", "house", "age", "job_duration", "occupation",
"job_type", "n_enquiries", "companion")
names(data)
data$job_stat <- fct_recode(data$job_stat, "Commer. Assoc." = "Commercial associate")
data$family <- fct_recode(data$family,  "single" = "Single / not married", "divorce" = "Separated")
data$house <- fct_recode(data$house, "apartment" = "House / apartment", "Municipal apart." = "Municipal apartment", "Rented apart."="Rented apartment", "Office apart."="Office apartment", "Co-op apart."="Co-op apartment")
data$occupation <- fct_recode(data$occupation, "High-tech stf" = "High skill tech staff", "Medic stf" = "Medicine staff", "Chef" = "Cooking staff", "Security" = "Security staff", "Waiters" = "Waiters/barmen staff", "Low-skill labor." = "Low-skill Laborers", "Private ser." = "Private service staff")
data$companion <- fct_recode(data$companion, "Partner" = "Spouse, partner", "Unaccompan." = "Unaccompanied", "Group_people" = "Group of people")
data$studies <- fct_recode(data$studies, "Secondary" = "Secondary / secondary special", "Higher edu." = "Higher education")
# convert numerical (0,1) -> as factor ("payed", "overdue")
data$target <- factor(data$target, levels = c(0,1), labels = c("payed","overdue"))
# convert character -> as factor:
char_cols <- which(sapply(data, is.character))
data[, char_cols] <- lapply(data[, char_cols], as.factor)
# Review if the transformation is executed properly
str(data)
summary(data)
data$age<-floor(abs(data$age) / 365)
# data$job_duration
data$job_duration[which(data$job_duration == 365243)] <- NA
data$job_duration <- (abs(data$job_duration) / 365) # job duration in years
data$job_type <- as.character(data$job_type)
data$job_type[which(data$job_type == "XNA")] <- "Unknown"
data$job_type <- as.factor(data$job_type)
data$gender <- as.character(data$gender)
data$gender[which(data$gender == "XNA")] <- "Unknown"
data$gender <- as.factor(data$gender)
data$occupation <- as.character(data$occupation)
data$occupation[which(data$occupation == "")] <- "Unknown"
data$occupation <- as.factor(data$occupation)
data$companion <- as.character(data$companion)
data$companion[which(data$companion == "")] <- "Unknown"
data$companion <- as.factor(data$companion)
summary(data)
names(table(data$occupation))
# What does the following code do?
# data <- data %>%
#  mutate_all(~replace(., . == "XNA", "Unknown"))
# print(unique(data$occupation))
names(table(data$job_type))
names(table(data$companion))
missing.values.data <-  as.data.frame(skimr::skim(data))
na_perc = sum(missing.values.data$n_missing) / (ncol(data) * nrow(data)) * 100
unknown_count = sum(data$job_type == "Unknown", na.rm = T) + sum(data$gender == "Unknown") +
sum(data$occupation == "Unknown") + sum(data$companion == "Unknown")
unknown_perc = unknown_count / (ncol(data) * nrow(data)) * 100
missing_perc = na_perc + unknown_perc
689/nrow(data)*100
LittleMCAR<-function(x){
if (!require(mvnmle))
stop("You must have mvnmle installed to use LittleMCAR")
if (!(is.matrix(x) | is.data.frame(x)))
stop("Data should be a matrix or dataframe")
if (is.data.frame(x))
x <- data.matrix(x)
# define variables
n.var<-ncol(x) # number of variables
n<-nrow(x)  #number of respondents
var.names<-colnames(x)
r <- 1 * is.na(x)
nmis <- as.integer(apply(r, 2, sum))  #number of missing data for each variable
mdp <- (r %*% (2^((1:n.var - 1)))) + 1  #missing data patterns
x.mp<-data.frame(cbind(x,mdp))
colnames(x.mp)<-c(var.names,"MisPat")
n.mis.pat<-length(unique(x.mp$MisPat)) # number of missing data patterns
p<-n.mis.pat-1
gmean<-mlest(x)$muhat #ML estimate of grand mean (assumes Normal dist)
gcov<-mlest(x)$sigmahat #ML estimate of grand covariance (assumes Normal dist)
colnames(gcov)<-rownames(gcov)<-colnames(x)
#recode MisPat variable to go from 1 through n.mis.pat
x.mp$MisPat2<-rep(NA,n)
for (i in 1:n.mis.pat){
x.mp$MisPat2[x.mp$MisPat == sort(unique(x.mp$MisPat), partial=(i))[i]]<- i
}
x.mp$MisPat<-x.mp$MisPat2
x.mp<-x.mp[ , -which(names(x.mp) %in% "MisPat2")]
#make list of datasets for each pattern of missing data
datasets<-list()
for (i in 1:n.mis.pat){
datasets[[paste("DataSet",i,sep="")]]<-x.mp[which(x.mp$MisPat==i),1:n.var]
}
#degrees of freedom
kj<-0
for (i in 1:n.mis.pat){
no.na<-as.matrix(1* !is.na(colSums(datasets[[i]])))
kj<-kj+colSums(no.na)
}
df<-kj -n.var
#Little's chi-square
d2<-0
cat("this could take a while")
for (i in 1:n.mis.pat){
mean<-(colMeans(datasets[[i]])-gmean)
mean<-mean[!is.na(mean)]
keep<-1* !is.na(colSums(datasets[[i]]))
keep<-keep[which(keep[1:n.var]!=0)]
cov<-gcov
cov<-cov[which(rownames(cov) %in% names(keep)) , which(colnames(cov) %in% names(keep))]
d2<-as.numeric(d2+(sum(x.mp$MisPat==i)*(t(mean)%*%solve(cov)%*%mean)))
}
#p-value for chi-square
p.value<-1-pchisq(d2,df)
#descriptives of missing data
amount.missing<-matrix(nmis, 1, length(nmis))
percent.missing<-amount.missing/n
amount.missing<-rbind(amount.missing,percent.missing)
colnames(amount.missing)<-var.names
rownames(amount.missing)<-c("Number Missing", "Percent Missing")
list(chi.square=d2, df=df, p.value=p.value, missing.patterns=n.mis.pat, amount.missing=amount.missing, data=datasets)
}
little.test <- LittleMCAR(data)
little.test$chi.square
little.test$p.value
little.test$df
little.test <- LittleMCAR(data)
little.test$chi.square
little.test$p.value
little.test$df
little.test$missing.patterns
little.test$amount.missing
# select numerical variables
numerical_data <- data %>%
select_if(is.numeric)
md.pattern(numerical_data)
# Look the NA's with VIM packages
mice_plot <- aggr(numerical_data, col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(numerical_data), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
# use mice to impute the missing numerical values
imputed_Data <- mice(numerical_data, m=5, maxit = 50, method = 'pmm', seed = 500)
summary(imputed_Data)
# inspect quality of imputations
stripplot(imputed_Data, price, pch = 19, xlab = "Imputation number")
imputed_Data$imp$price
# get complete data ( 3nd out of 5)
completeData <- mice::complete(imputed_Data, 3)
knn_imputed <- kNN(numerical_data)
marginplot(knn_imputed[, c("price", "job_duration")])
columns_to_replace <- c("price", "n_enquiries", "job_duration")
data[columns_to_replace] <- completeData[columns_to_replace]
head(data)
numeriques<-which(sapply(data,is.numeric))
numeriques
dcon<-data[,numeriques]
sapply(dcon,class)
pc1 <- prcomp(dcon, scale=TRUE)
class(pc1)
attributes(pc1)
print(pc1)
pc1$sdev
inerProj<- pc1$sdev^2
inerProj
totalIner<- sum(inerProj)
totalIner
pinerEix<- 100*inerProj/totalIner
pinerEix
barplot(pinerEix)
#Cummulated Inertia in subspaces, from first principal component to the 11th dimension subspace
barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2])
percInerAccum<-100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]
percInerAccum<-100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]
percInerAccum
# SELECTION OF THE SINGIFICNT DIMENSIONS (keep 80% of total inertia)
# In order to keep more than 80% of information, the required components are 5 (82,367%).
nd = 5
print(pc1)
attributes(pc1)
pc1$rotation
# STORAGE OF THE EIGENVALUES, EIGENVECTORS AND PROJECTIONS IN THE nd DIMENSIONS
View(pc1$x)
dim(pc1$x)
dim(dcon)
dcon[2000,]
pc1$x[2000,]
Psi = pc1$x[,1:nd]
dim(Psi)
Psi[2000,]
iden = row.names(dcon)
iden
etiq = names(dcon)
etiq
ze = rep(0,length(etiq)) # WE WILL NEED THIS VECTOR AFTERWARDS FOR THE GRAPHICS
ze
#select your axis
#eje1<-2
eje1<-1
#eje2<-3
eje2<-2
plot(Psi[,eje1],Psi[,eje2])
psi
Psi
plot(Psi[,eje1],Psi[,eje2])
text(Psi[,eje1],Psi[,eje2],labels=iden, cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
plot(Psi[,eje1],Psi[,eje2], type="n")
plot(Psi[,eje1],Psi[,eje2])
text(Psi[,eje1],Psi[,eje2],labels=iden, cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
text(Psi[,eje1],Psi[,eje2], cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Finding distances
distances <- mahalanobis(x = Psi[,eje1] , center = Psi[,eje1].center, cov = Psi[,eje1].cov)
?mahalanobis
distances <- mahalanobis(x = Psi[,eje1])
distances <- mahalanobis(x = Psi[,eje1], center = mean (Psi[,eje1]), cov = cov(Psi[,eje1]))
df = (Psi[,eje1],Psi[,eje2])
df <- (Psi[,eje1],Psi[,eje2])
df <- c(Psi[,eje1],Psi[,eje2])
df <- [c(Psi[,eje1],Psi[,eje2])]
center =
cov =
?c
df <- c(Psi[,eje2])
df
df <- c(Psi[eje1,eje2])
df
df <- c(Psi[,eje1:eje2])
df
df <- Psi[,eje1:eje2]
df
df.center = colMeans(df)
cov = cov(df)
distances <- mahalanobis(x = df, center = df.center, cov = df.mean
distances <- mahalanobis(x = df, center = df.center, cov = df.mean)
distances <- mahalanobis(x = df, center = df.center, cov = df.mean)
distances <- mahalanobis(x = df, center = df.center, cov = df.cov)
df.cov = cov(df)
distances <- mahalanobis(x = df, center = df.center, cov = df.cov)
# Cutoff value for ditances from Chi-Sqaure Dist.
# with p = 0.95 df = 2 which in ncol(air)
cutoff <- qchisq(p = 0.95 , df = ncol(df))
## Display observation whose distance greater than cutoff value
air[distances > cutoff ,]
## Display observation whose distance greater than cutoff value
df[distances > cutoff ,]
## Display observation whose distance greater than cutoff value
df[distances > cutoff ,]
# Cutoff value for ditances from Chi-Sqaure Dist.
# with p = 0.95 df = 2 which in ncol(air)
cutoff <- qchisq(p = 0.95 , df = ncol(df))
cutoff
df
distances
dff <- (df, distances)
dff <- rbind(df, distances)
df
distances
?format
?type
type(df)
typeof(df)
typeof(distances)
cbind(df, distances)
# Plot the PCA plan
plot(Psi[,eje1],Psi[,eje2])
# text(Psi[,eje1],Psi[,eje2],labels=iden,  cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
library(dplyr)
library(tidyverse)
library(skimr)
library(VIM)
library(mice)
library(cluster)
library(ggplot2)
require(StatMatch)
# Ellipse coordinates names should be same with air data set
ellipse <- as.data.frame(ellipse)
colnames(ellipse) <- colnames(df)
# Ellipse coordinates names should be same with air data set
ellipse <- as.data.frame(ellipse)
# Create scatter Plot
figure <- ggplot(df , aes(x = Psi[,eje1] , y = Psi[,eje2])) +
geom_point(size = 2) +
geom_polygon(data = ellipse , fill = "orange" , color = "orange" , alpha = 0.5)+
geom_point(aes(df.center[1] , df.center[2]) , size = 5 , color = "blue") +
geom_text( aes(label = row.names(df)) , hjust = 1 , vjust = -1.5 ,size = 2.5 ) +
ylab("Values") + xlab("Values")
# Run and display plot
figure
?elipse
install.packages("ellipse")
?ellipse
# Ellipse coordinates names should be same with air data set
ellipse <- as.data.frame(ellipse)
ellipse(df)
ellipse(df.center, df.cov, distances)
ellipse(center = df.center, shape = df.cov, radius = distances)
ellipse
Ellipses
rad <- sqrt(qchisq(0.95), df = ncol(df))
# Defining the parameter for Mahalanobis distance
df <- Psi[,eje1:eje2]
rad <- sqrt(qchisq(0.95), df = ncol(df))
rad <- sqrt(qchisq(0.95, df = ncol(df)))
# Ellipse coordinates names should be same with air data set
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE))
library(car)
# Ellipse coordinates names should be same with air data set
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE))
# Plot the PCA plan
plot(Psi[,eje1],Psi[,eje2])
# text(Psi[,eje1],Psi[,eje2],labels=iden,  cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Defining the parameter for Mahalanobis distance
df <- Psi[,eje1:eje2]
df.center <- colMeans(df)
df.cov <- cov(df)
rad <- sqrt(qchisq(0.95, df = ncol(df)))
# Grafic plot of Mahalanobis distance. Plotting the ellipse
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE))
?ellipse
# Grafic plot of Mahalanobis distance. Plotting the ellipse
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE, col = "orange"))
colnames(ellipse) <- colnames(df)
# Grafic plot of Mahalanobis distance. Plotting the ellipse
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE, col = "orange", fill = "orange"))
# Grafic plot of Mahalanobis distance. Plotting the ellipse
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE, col = "orange", fill = "orange"))
# Grafic plot of Mahalanobis distance. Plotting the ellipse
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE, col = "orange", fill = "orange"))
# Grafic plot of Mahalanobis distance. Plotting the ellipse
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE, col = "orange"))
?elipse
?ellipse
# Grafic plot of Mahalanobis distance. Plotting the ellipse
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE, col = "orange", fill=True))
# Grafic plot of Mahalanobis distance. Plotting the ellipse
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE, col = "orange", fill=TRUE))
# Applying the function
distances <- mahalanobis(x = df, center = df.center, cov = df.cov)
rad <- sqrt(qchisq(0.975, df = ncol(df)))
# Plotting the ellipse of mahalanobis distance
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE, col = "orange", fill=TRUE))
# Applying the function
distances <- mahalanobis(x = df, center = df.center, cov = df.cov)
# Defining the Cut-off trigger using Chi-square distance
# with p = 0.95 df = 2 which in ncol(df)
cutoff <- qchisq(p = 0.95 , df = ncol(df))
# Display all the observations whose distance is greater than the cut-off value.
df[distances > cutoff ,]
# Plot the PCA plan
plot(Psi[,eje1],Psi[,eje2])
# text(Psi[,eje1],Psi[,eje2],labels=iden,  cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Defining the parameter for Mahalanobis distance
df <- Psi[,eje1:eje2]
df.center <- colMeans(df)
df.cov <- cov(df)
rad <- sqrt(qchisq(0.95, df = ncol(df)))
# Plotting the ellipse of mahalanobis distance
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE, col = "orange", fill=TRUE))
# Applying the function
distances <- mahalanobis(x = df, center = df.center, cov = df.cov)
# Defining the Cut-off trigger using Chi-square distance with p = 0.95 df = 2 which in ncol(df)
cutoff <- qchisq(p = 0.95 , df = ncol(df))
# Display all the observations whose distance is greater than the cut-off value.
df[distances > cutoff ,]
cbind(df, distances)
# Display all the observations whose distance is greater than the cut-off value.
df(distances > cutoff ,)
# Display all the observations whose distance is greater than the cut-off value.
df(distances > cutoff)
# Display all the observations whose distance is greater than the cut-off value.
df[Distances > cutoff ,]
# Display all the observations whose distance is greater than the cut-off value.
df[distances > cutoff ,]
# Display all the observations whose distance is greater than the cut-off value.
df[distances > cutoff ,]
df_clean <- df[distances < cutoff ,]
df_clean
plot(df)
plot(df_clean)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
text(Psi[,eje1],Psi[,eje2],labels=iden,  cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Displan only the observation within the distance
df_clean <- df[distances < cutoff ,]
plot(df_clean)
text(Psi[,eje1],Psi[,eje2],labels=iden,  cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
?plot
plot(df_clean, type = "p")
# Displan only the observation within the distance
df_clean <- df[distances < cutoff ,]
plot(df_clean, type = "p")
# text(Psi[,eje1],Psi[,eje2],labels=iden,  cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
plot(df_clean, type = "c")
plot(df_clean, type = "p")
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
library(dplyr)
library(tidyverse)
library(skimr)
library(VIM)
library(mice)
library(cluster)
library(ggplot2)
library(car)
require(StatMatch)
data <- read.csv("reduced_data_sample.csv")
names(data) <- c("id", "target", "contract", "gender", "car", "n_child",
"income", "credit", "loan", "price", "job_stat", "studies",
"family", "house", "age", "job_duration", "occupation",
"job_type", "n_enquiries", "companion")
names(data)
data$job_stat <- fct_recode(data$job_stat, "Commer. Assoc." = "Commercial associate")
data$family <- fct_recode(data$family,  "single" = "Single / not married", "divorce" = "Separated")
data$house <- fct_recode(data$house, "apartment" = "House / apartment", "Municipal apart." = "Municipal apartment", "Rented apart."="Rented apartment", "Office apart."="Office apartment", "Co-op apart."="Co-op apartment")
data$occupation <- fct_recode(data$occupation, "High-tech stf" = "High skill tech staff", "Medic stf" = "Medicine staff", "Chef" = "Cooking staff", "Security" = "Security staff", "Waiters" = "Waiters/barmen staff", "Low-skill labor." = "Low-skill Laborers", "Private ser." = "Private service staff")
data$companion <- fct_recode(data$companion, "Partner" = "Spouse, partner", "Unaccompan." = "Unaccompanied", "Group_people" = "Group of people")
data$studies <- fct_recode(data$studies, "Secondary" = "Secondary / secondary special", "Higher edu." = "Higher education")
data$job_stat <- fct_recode(data$job_stat, "Commer. Assoc." = "Commercial associate")
data$family <- fct_recode(data$family,  "single" = "Single / not married", "divorce" = "Separated")
data$house <- fct_recode(data$house, "apartment" = "House / apartment", "Municipal apart." = "Municipal apartment", "Rented apart."="Rented apartment", "Office apart."="Office apartment", "Co-op apart."="Co-op apartment")
data$occupation <- fct_recode(data$occupation, "High-tech stf" = "High skill tech staff", "Medic stf" = "Medicine staff", "Chef" = "Cooking staff", "Security" = "Security staff", "Waiters" = "Waiters/barmen staff", "Low-skill labor." = "Low-skill Laborers", "Private ser." = "Private service staff")
data$companion <- fct_recode(data$companion, "Partner" = "Spouse, partner", "Unaccompan." = "Unaccompanied", "Group_people" = "Group of people")
data$studies <- fct_recode(data$studies, "Secondary" = "Secondary / secondary special", "Higher edu." = "Higher education")
data <- read.csv("reduced_data_sample.csv")
names(data) <- c("id", "target", "contract", "gender", "car", "n_child",
"income", "credit", "loan", "price", "job_stat", "studies",
"family", "house", "age", "job_duration", "occupation",
"job_type", "n_enquiries", "companion")
names(data)
data$job_stat <- fct_recode(data$job_stat, "Commer. Assoc." = "Commercial associate")
data$family <- fct_recode(data$family,  "single" = "Single / not married", "divorce" = "Separated")
data$house <- fct_recode(data$house, "apartment" = "House / apartment", "Municipal apart." = "Municipal apartment", "Rented apart."="Rented apartment", "Office apart."="Office apartment", "Co-op apart."="Co-op apartment")
data$occupation <- fct_recode(data$occupation, "High-tech stf" = "High skill tech staff", "Medic stf" = "Medicine staff", "Chef" = "Cooking staff", "Security" = "Security staff", "Waiters" = "Waiters/barmen staff", "Low-skill labor." = "Low-skill Laborers", "Private ser." = "Private service staff")
data$companion <- fct_recode(data$companion, "Partner" = "Spouse, partner", "Unaccompan." = "Unaccompanied", "Group_people" = "Group of people")
data$studies <- fct_recode(data$studies, "Secondary" = "Secondary / secondary special", "Higher edu." = "Higher education")
# convert numerical (0,1) -> as factor ("payed", "overdue")
data$target <- factor(data$target, levels = c(0,1), labels = c("payed","overdue"))
# convert character -> as factor:
char_cols <- which(sapply(data, is.character))
data[, char_cols] <- lapply(data[, char_cols], as.factor)
# Review if the transformation is executed properly
str(data)
summary(data)
# data$job_duration
data$job_duration[which(data$job_duration == 365243)] <- NA
data$job_duration <- (abs(data$job_duration) / 365) # job duration in years
data$job_type <- as.character(data$job_type)
data$job_type[which(data$job_type == "XNA")] <- "Unknown"
data$job_type <- as.factor(data$job_type)
data$gender <- as.character(data$gender)
data$gender[which(data$gender == "XNA")] <- "Unknown"
data$gender <- as.factor(data$gender)
data$occupation <- as.character(data$occupation)
data$occupation[which(data$occupation == "")] <- "Unknown"
data$occupation <- as.factor(data$occupation)
data$companion <- as.character(data$companion)
data$companion[which(data$companion == "")] <- "Unknown"
data$companion <- as.factor(data$companion)
