axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
# arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.8)
text(-0.65,-0.7,
substitute(paste(italic('Note: "price" and "credit" share almost the same space')))
,col="red", cex=0.8)
plot(n_child, avg(age))
n_child
data$n_child
data_age
data$age
plot(data$n_child, avg(data$age))
plot(data$n_child, mean(data$age))
plot(Psi[,eje1],Psi[,eje2],type="n", xlim = c(-1,-0.7), ylim = c(-0.2, 0.2))
axis(side=1, pos= 0, labels = F)
axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.7)
# Check that there are not more variables aggregated close to "loan"
plot(Psi[,eje1],Psi[,eje2],type="n", xlim = c(-1,-0.85), ylim = c(-0.1, 0))
axis(side=1, pos= 0, labels = F)
axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.7)
# Adding the target variable (index=2)
varcat=factor(data[,2])
plot(Psi[,1],Psi[,2], pch=c(1,20) [varcat], col=c("lightgreen", "red") [varcat],
xlab = 'PC1', ylab = 'PC2')
axis(side=1, pos= 0, labels = F, col="darkgray")
axis(side=3, pos= 0, labels = F, col="darkgray")
axis(side=2, pos= 0, labels = F, col="darkgray")
axis(side=4, pos= 0, labels = F, col="darkgray")
legend(levels(factor(varcat)),pch=c(1,20),col=c(1,2), cex=0.6)
# From the previous plot, check where the centroids of "paid" and "overdue" are
varcat<-factor(data[,2])
fdic1 = tapply(Psi[,eje1],varcat,mean)
fdic2 = tapply(Psi[,eje2],varcat,mean)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim= c(-1,1), ylim = c(-1,1))
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
text(fdic1,fdic2,labels=levels(varcat), col=c("green", "red"),
cex=0.7)
varcat<-factor(data[,2])
fdic1 = tapply(Psi[,eje1],varcat,mean)
fdic2 = tapply(Psi[,eje2],varcat,mean)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim= c(-1,1), ylim = c(-1,1))
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
text(fdic1,fdic2,labels=levels(varcat), col=c("green", "red"),
cex=0.7)
dcat <- c(2:5,11:14,17:18,20)
colors<-rainbow(length(dcat))
plot(Psi[,eje1],Psi[,eje2], type = "n")
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Loop to add all categories
c <- 1
for(k in dcat){
seguentColor<-colors[c]
fdic1 = tapply(Psi[,eje1],data[,k],mean)
fdic2 = tapply(Psi[,eje2],data[,k],mean)
text(fdic1,fdic2,labels=levels(factor(data[,k])),col=seguentColor, cex=0.6)
c<-c+1
}
legend("bottomleft",names(data)[dcat],pch=1,col=colors, cex=0.6)
# A zoom is required
dcat <- c(2:5,11:14,17:18,20)
colors<-rainbow(length(dcat))
plot(Psi[,eje1],Psi[,eje2], type = "n", xlim = c(-3,2), ylim = c(-2,3))
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Loop to add all categories
c <- 1
for(k in dcat){
seguentColor<-colors[c]
fdic1 = tapply(Psi[,eje1],data[,k],mean)
fdic2 = tapply(Psi[,eje2],data[,k],mean)
text(fdic1,fdic2,labels=levels(factor(data[,k])),col=seguentColor, cex=0.6)
c<-c+1
}
legend("bottomleft",names(data)[dcat],pch=1,col=colors, cex=0.6)
# Plot the PCA plan
plot(Psi[,eje1],Psi[,eje2])
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Defining the parameter for Mahalanobis distance
df <- Psi[,eje1:eje2]
df.center <- colMeans(df)
df.cov <- cov(df)
rad <- sqrt(qchisq(0.95, df = ncol(df)))
# Plotting the ellipse of mahalanobis distance
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE, col = "orange", fill=TRUE))
# Applying the function
distances <- mahalanobis(x = df, center = df.center, cov = df.cov)
# Defining the Cut-off trigger using Chi-square distance with p = 0.95 df = 2 which in ncol(df)
cutoff <- qchisq(p = 0.95 , df = ncol(df))
# Display all the observations whose distance is greater than the cut-off value.
df[distances > cutoff ,]
# Displan only the observation within the distance
df_clean <- df[distances < cutoff ,]
plot(df_clean, type = "p")
# text(Psi[,eje1],Psi[,eje2],labels=iden,  cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Plot the PCA plan
plot(Psi[,eje1],Psi[,eje2])
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Defining the parameter for Mahalanobis distance
df <- Psi[,eje1:eje2]
df.center <- colMeans(df)
df.cov <- cov(df)
rad <- sqrt(qchisq(0.95, df = ncol(df)))
# Plotting the ellipse of mahalanobis distance
ellipse <- data.frame(ellipse(df.center, df.cov, rad, 100, FALSE, col = "orange", fill=TRUE))
# Applying the function
distances <- mahalanobis(x = df, center = df.center, cov = df.cov)
# Defining the Cut-off trigger using Chi-square distance with p = 0.95 df = 2 which in ncol(df)
cutoff <- qchisq(p = 0.95 , df = ncol(df))
# Display all the observations whose distance is greater than the cut-off value.
df[distances > cutoff ,]
# Displan only the observation within the distance
df_clean <- df[distances < cutoff ,]
plot(df_clean, type = "p")
# text(Psi[,eje1],Psi[,eje2],labels=iden,  cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
library(dplyr)
library(tidyverse)
library(skimr)
library(VIM)
library(mice)
library(cluster)
library(ggplot2)
library(car)
require(StatMatch)
data <- read.csv("Bank-India-data.csv")
summary(data)
names(data) <- c("id", "target", "contract", "gender", "car", "n_child",
"income", "credit", "loan", "price", "job_stat", "studies",
"family", "house", "age", "job_duration", "occupation",
"job_type", "n_enquiries", "companion")
names(data)
data$job_stat <- fct_recode(data$job_stat, "Commer. Assoc." = "Commercial associate")
data$family <- fct_recode(data$family,  "single" = "Single / not married", "divorce" = "Separated")
data$house <- fct_recode(data$house, "apartment" = "House / apartment", "Municipal apart." = "Municipal apartment", "Rented apart."="Rented apartment", "Office apart."="Office apartment", "Co-op apart."="Co-op apartment")
data$occupation <- fct_recode(data$occupation, "High-tech stf" = "High skill tech staff", "Medic stf" = "Medicine staff", "Chef" = "Cooking staff", "Security" = "Security staff", "Waiters" = "Waiters/barmen staff", "Low-skill labor." = "Low-skill Laborers", "Private ser." = "Private service staff")
data$companion <- fct_recode(data$companion, "Partner" = "Spouse, partner", "Unaccompan." = "Unaccompanied", "Group_people" = "Group of people")
data$studies <- fct_recode(data$studies, "Secondary" = "Secondary / secondary special", "Higher edu." = "Higher education")
# convert numerical target (0,1) -> as factor ("payed", "overdue")
data$target <- factor(data$target, levels = c(0,1), labels = c("payed","overdue"))
# convert character feature (such as gender, car or contract type) -> as factor:
char_cols <- which(sapply(data, is.character))
data[, char_cols] <- lapply(data[, char_cols], as.factor)
# Review if the transformation has executed properly
str(data)
summary(data)
data$age<-floor(abs(data$age) / 365)
# data$job_duration
data$job_duration[which(data$job_duration == 365243)] <- NA
data$job_duration <- (abs(data$job_duration) / 365) # job duration in years
data$job_type <- as.character(data$job_type)
data$job_type[which(data$job_type == "XNA")] <- "Unknown"
data$job_type <- as.factor(data$job_type)
data$gender <- as.character(data$gender)
data$gender[which(data$gender == "XNA")] <- "Unknown"
data$gender <- as.factor(data$gender)
data$occupation <- as.character(data$occupation)
data$occupation[which(data$occupation == "")] <- "Unknown"
data$occupation <- as.factor(data$occupation)
data$companion <- as.character(data$companion)
data$companion[which(data$companion == "")] <- "Unknown"
data$companion <- as.factor(data$companion)
plot(data$age, data$n_child)
plot(data$n_child, data$age)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(dplyr)
library(tidyverse)
library(skimr)
library(VIM)
library(mice)
library(cluster)
require(StatMatch)
data <- read.csv("Bank-India-data.csv")
names(data)
names(data) <- c("id", "target", "contract", "gender", "car", "n_child",
"income", "credit", "loan", "price", "job_stat", "studies",
"family", "house", "age", "job_duration", "occupation",
"job_type", "n_enquiries", "companion")
names(data)
# convert  numerical-> as factor
data$target <- factor(data$target, levels = c(0,1), labels = c("payed","overdue"))
# convert character -> as factor:
char_cols <- which(sapply(data, is.character))
data[, char_cols] <- lapply(data[, char_cols], as.factor)
str(data)
summary(data)
data$job_stat <- fct_recode(data$job_stat, "Commer. Assoc." = "Commercial associate")
data$family <- fct_recode(data$family,  "single" = "Single / not married", "divorce" = "Separated")
data$house <- fct_recode(data$house, "apartment" = "House / apartment", "Municipal apart." = "Municipal apartment", "Rented apart."="Rented apartment", "Office apart."="Office apartment", "Co-op apart."="Co-op apartment")
data$occupation <- fct_recode(data$occupation, "High-tech stf" = "High skill tech staff", "Medic stf" = "Medicine staff", "Chef" = "Cooking staff", "Security" = "Security staff", "Waiters staff" = "Waiters/barmen staff", "Low-skill labor." = "Low-skill Laborers")
data$companion <- fct_recode(data$companion, "partner" = "Spouse, partner", "Unaccompan." = "Unaccompanied", "Group of people" = "Group_people")
data$studies <- fct_recode(data$studies, "Secondary" = "Secondary / secondary special", "Higher edu." = "Higher education")
industry <- paste("Industry: type", 1:12)
job_industry <- data %>% filter(data$job_type %in% industry)
job_industry <- droplevels(job_industry)
con1 <- table(job_industry$job_type, job_industry$target)
con1
mosaicplot(con1)
chisq.test(con1)
data$age<-floor(abs(data$age) / 365)
# data$job_duration
data$job_duration[which(data$job_duration == 365243)] <- NA
data$job_duration <- (abs(data$job_duration) / 365) # job duration in years
data$job_type <- as.character(data$job_type)
data$job_type[which(data$job_type == "XNA")] <- "Unknown"
data$job_type <- as.factor(data$job_type)
data$gender <- as.character(data$gender)
data$gender[which(data$gender == "XNA")] <- "Unknown"
data$gender <- as.factor(data$gender)
data$occupation <- as.character(data$occupation)
data$occupation[which(data$occupation == "")] <- "Unknown"
data$occupation <- as.factor(data$occupation)
data$companion <- as.character(data$companion)
data$companion[which(data$companion == "")] <- "Unknown"
data$companion <- as.factor(data$companion)
summary(data)
names(table(data$occupation))
# What does the following code do?
# data <- data %>%
#  mutate_all(~replace(., . == "XNA", "Unknown"))
# print(unique(data$occupation))
names(table(data$job_type))
names(table(data$companion))
missing.values.data <-  as.data.frame(skimr::skim(data))
na_perc = sum(missing.values.data$n_missing) / (ncol(data) * nrow(data)) * 100
unknown_count = sum(data$job_type == "Unknown", na.rm = T) + sum(data$gender == "Unknown") +
sum(data$occupation == "Unknown") + sum(data$companion == "Unknown")
unknown_perc = unknown_count / (ncol(data) * nrow(data)) * 100
missing_perc = na_perc + unknown_perc
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
ggplot(df, aes(x = data$n_child, y = data$age)) +
geom_bar(stat = "summary", fun = "mean", fill = "blue") +
labs(title = "Average Age by Number of Children",
x = "Number of Children",
y = "Average Age") +
theme_minimal()
ggplot(df, aes(x = data$n_child, y = data$age)) +
geom_bar(stat = "summary", fun = "mean", fill = "blue") +
labs(title = "Average Age by Number of Children",
x = "Number of Children",
y = "Average Age") +
theme_minimal()
type(data$age)
type(data$age)
summary_df <- df %>%
group_by(data$n_child) %>%
summarize(Average_Age = mean(data$age))
data$n_child
data$age
# Calculate the average age for each n_child value
avg_age <- tapply(data$age, data$n_child, mean)
# Create the scatter plot
plot(names(avg_age), avg_age, xlab = "n_child", ylab = "Average Age", main = "Average Age vs. n_child")
regression_model <- lm(data$age ~ data$n_child, data = data)
abline(regression_model, col = "blue")
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
library(dplyr)
library(tidyverse)
library(skimr)
library(VIM)
library(mice)
library(cluster)
require(StatMatch)
data <- read.csv("Bank-India-data.csv")
names(data)
names(data) <- c("id", "target", "contract", "gender", "car", "n_child",
"income", "credit", "loan", "price", "job_stat", "studies",
"family", "house", "age", "job_duration", "occupation",
"job_type", "n_enquiries", "companion")
names(data)
# convert  numerical-> as factor
data$target <- factor(data$target, levels = c(0,1), labels = c("payed","overdue"))
# convert character -> as factor:
char_cols <- which(sapply(data, is.character))
data[, char_cols] <- lapply(data[, char_cols], as.factor)
str(data)
summary(data)
data$job_stat <- fct_recode(data$job_stat, "Commer. Assoc." = "Commercial associate")
data$family <- fct_recode(data$family,  "single" = "Single / not married", "divorce" = "Separated")
data$house <- fct_recode(data$house, "apartment" = "House / apartment", "Municipal apart." = "Municipal apartment", "Rented apart."="Rented apartment", "Office apart."="Office apartment", "Co-op apart."="Co-op apartment")
data$occupation <- fct_recode(data$occupation, "High-tech stf" = "High skill tech staff", "Medic stf" = "Medicine staff", "Chef" = "Cooking staff", "Security" = "Security staff", "Waiters staff" = "Waiters/barmen staff", "Low-skill labor." = "Low-skill Laborers")
data$companion <- fct_recode(data$companion, "partner" = "Spouse, partner", "Unaccompan." = "Unaccompanied", "Group of people" = "Group_people")
data$studies <- fct_recode(data$studies, "Secondary" = "Secondary / secondary special", "Higher edu." = "Higher education")
industry <- paste("Industry: type", 1:12)
job_industry <- data %>% filter(data$job_type %in% industry)
job_industry <- droplevels(job_industry)
con1 <- table(job_industry$job_type, job_industry$target)
con1
mosaicplot(con1)
chisq.test(con1)
data$age<-floor(abs(data$age) / 365)
# data$job_duration
data$job_duration[which(data$job_duration == 365243)] <- NA
data$job_duration <- (abs(data$job_duration) / 365) # job duration in years
data$job_type <- as.character(data$job_type)
data$job_type[which(data$job_type == "XNA")] <- "Unknown"
data$job_type <- as.factor(data$job_type)
data$gender <- as.character(data$gender)
data$gender[which(data$gender == "XNA")] <- "Unknown"
data$gender <- as.factor(data$gender)
data$occupation <- as.character(data$occupation)
data$occupation[which(data$occupation == "")] <- "Unknown"
data$occupation <- as.factor(data$occupation)
data$companion <- as.character(data$companion)
data$companion[which(data$companion == "")] <- "Unknown"
data$companion <- as.factor(data$companion)
summary(data)
names(table(data$occupation))
# What does the following code do?
# data <- data %>%
#  mutate_all(~replace(., . == "XNA", "Unknown"))
# print(unique(data$occupation))
names(table(data$job_type))
names(table(data$companion))
missing.values.data <-  as.data.frame(skimr::skim(data))
na_perc = sum(missing.values.data$n_missing) / (ncol(data) * nrow(data)) * 100
unknown_count = sum(data$job_type == "Unknown", na.rm = T) + sum(data$gender == "Unknown") +
sum(data$occupation == "Unknown") + sum(data$companion == "Unknown")
unknown_perc = unknown_count / (ncol(data) * nrow(data)) * 100
missing_perc = na_perc + unknown_perc
689/nrow(data)*100
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
# df <- data.frame(data$n_child, age)
# Calculate the average age for each n_child value
avg_age <- tapply(data$age, data$n_child, mean)
# Create the scatter plot
plot(names(avg_age), avg_age, xlab = "n_child", ylab = "Average Age", main = "Average Age vs. n_child")
regression_model <- lm(data$age ~ data$n_child, data = data)
abline(regression_model, col = "blue")
library(dplyr)
library(tidyverse)
library(skimr)
library(VIM)
library(mice)
library(cluster)
require(StatMatch)
data <- read.csv("Bank-India-data.csv")
names(data)
names(data) <- c("id", "target", "contract", "gender", "car", "n_child",
"income", "credit", "loan", "price", "job_stat", "studies",
"family", "house", "age", "job_duration", "occupation",
"job_type", "n_enquiries", "companion")
names(data)
# convert  numerical-> as factor
data$target <- factor(data$target, levels = c(0,1), labels = c("payed","overdue"))
# convert character -> as factor:
char_cols <- which(sapply(data, is.character))
data[, char_cols] <- lapply(data[, char_cols], as.factor)
str(data)
summary(data)
data$job_stat <- fct_recode(data$job_stat, "Commer. Assoc." = "Commercial associate")
data$family <- fct_recode(data$family,  "single" = "Single / not married", "divorce" = "Separated")
data$house <- fct_recode(data$house, "apartment" = "House / apartment", "Municipal apart." = "Municipal apartment", "Rented apart."="Rented apartment", "Office apart."="Office apartment", "Co-op apart."="Co-op apartment")
data$occupation <- fct_recode(data$occupation, "High-tech stf" = "High skill tech staff", "Medic stf" = "Medicine staff", "Chef" = "Cooking staff", "Security" = "Security staff", "Waiters staff" = "Waiters/barmen staff", "Low-skill labor." = "Low-skill Laborers")
data$companion <- fct_recode(data$companion, "partner" = "Spouse, partner", "Unaccompan." = "Unaccompanied", "Group of people" = "Group_people")
data$studies <- fct_recode(data$studies, "Secondary" = "Secondary / secondary special", "Higher edu." = "Higher education")
# Clean workspace
rm(list=ls())
#  READING CREDSCO_BIN
# load("d:/karina/docencia/sreferenciesppt/16.AssociatiusVisualitzacio/MultivariateAnalysis/PracticaR/credscok_bin")
# Clear plots
if(!is.null(dev.list())) dev.off()
library(dplyr)
library(tidyverse)
library(skimr)
library(VIM)
library(mice)
library(cluster)
require(StatMatch)
data <- read.csv("Bank-India-data.csv")
names(data)
names(data) <- c("id", "target", "contract", "gender", "car", "n_child",
"income", "credit", "loan", "price", "job_stat", "studies",
"family", "house", "age", "job_duration", "occupation",
"job_type", "n_enquiries", "companion")
names(data)
# convert  numerical-> as factor
data$target <- factor(data$target, levels = c(0,1), labels = c("payed","overdue"))
# convert character -> as factor:
char_cols <- which(sapply(data, is.character))
data[, char_cols] <- lapply(data[, char_cols], as.factor)
str(data)
summary(data)
data$job_stat <- fct_recode(data$job_stat, "Commer. Assoc." = "Commercial associate")
data$family <- fct_recode(data$family,  "single" = "Single / not married", "divorce" = "Separated")
data$house <- fct_recode(data$house, "apartment" = "House / apartment", "Municipal apart." = "Municipal apartment", "Rented apart."="Rented apartment", "Office apart."="Office apartment", "Co-op apart."="Co-op apartment")
data$occupation <- fct_recode(data$occupation, "High-tech stf" = "High skill tech staff", "Medic stf" = "Medicine staff", "Chef" = "Cooking staff", "Security" = "Security staff", "Waiters staff" = "Waiters/barmen staff", "Low-skill labor." = "Low-skill Laborers")
data$companion <- fct_recode(data$companion, "partner" = "Spouse, partner", "Unaccompan." = "Unaccompanied", "Group of people" = "Group_people")
data$studies <- fct_recode(data$studies, "Secondary" = "Secondary / secondary special", "Higher edu." = "Higher education")
library(dplyr)
library(tidyverse)
library(skimr)
library(VIM)
library(mice)
library(cluster)
require(StatMatch)
data <- read.csv("Bank-India-data.csv")
names(data)
names(data) <- c("id", "target", "contract", "gender", "car", "n_child",
"income", "credit", "loan", "price", "job_stat", "studies",
"family", "house", "age", "job_duration", "occupation",
"job_type", "n_enquiries", "companion")
names(data)
# convert  numerical-> as factor
data$target <- factor(data$target, levels = c(0,1), labels = c("payed","overdue"))
# convert character -> as factor:
char_cols <- which(sapply(data, is.character))
data[, char_cols] <- lapply(data[, char_cols], as.factor)
str(data)
summary(data)
data$job_stat <- fct_recode(data$job_stat, "Commer. Assoc." = "Commercial associate")
data$family <- fct_recode(data$family,  "single" = "Single / not married", "divorce" = "Separated")
data$house <- fct_recode(data$house, "apartment" = "House / apartment", "Municipal apart." = "Municipal apartment", "Rented apart."="Rented apartment", "Office apart."="Office apartment", "Co-op apart."="Co-op apartment")
data$occupation <- fct_recode(data$occupation, "High-tech stf" = "High skill tech staff", "Medic stf" = "Medicine staff", "Chef" = "Cooking staff", "Security" = "Security staff", "Waiters" = "Waiters/barmen staff", "Low-skill labor." = "Low-skill Laborers", "Private ser." = "Private service staff")
data$companion <- fct_recode(data$companion, "Partner" = "Spouse, partner", "Unaccompan." = "Unaccompanied", "Group_people" = "Group of people")
data$studies <- fct_recode(data$studies, "Secondary" = "Secondary / secondary special", "Higher edu." = "Higher education")
industry <- paste("Industry: type", 1:12)
job_industry <- data %>% filter(data$job_type %in% industry)
job_industry <- droplevels(job_industry)
con1 <- table(job_industry$job_type, job_industry$target)
con1
mosaicplot(con1)
chisq.test(con1)
data$age<-floor(abs(data$age) / 365)
# data$job_duration
data$job_duration[which(data$job_duration == 365243)] <- NA
data$job_duration <- (abs(data$job_duration) / 365) # job duration in years
data$job_type <- as.character(data$job_type)
data$job_type[which(data$job_type == "XNA")] <- "Unknown"
data$job_type <- as.factor(data$job_type)
data$gender <- as.character(data$gender)
data$gender[which(data$gender == "XNA")] <- "Unknown"
data$gender <- as.factor(data$gender)
data$occupation <- as.character(data$occupation)
data$occupation[which(data$occupation == "")] <- "Unknown"
data$occupation <- as.factor(data$occupation)
data$companion <- as.character(data$companion)
data$companion[which(data$companion == "")] <- "Unknown"
data$companion <- as.factor(data$companion)
summary(data)
names(table(data$occupation))
# What does the following code do?
# data <- data %>%
#  mutate_all(~replace(., . == "XNA", "Unknown"))
# print(unique(data$occupation))
names(table(data$job_type))
names(table(data$companion))
missing.values.data <-  as.data.frame(skimr::skim(data))
na_perc = sum(missing.values.data$n_missing) / (ncol(data) * nrow(data)) * 100
unknown_count = sum(data$job_type == "Unknown", na.rm = T) + sum(data$gender == "Unknown") +
sum(data$occupation == "Unknown") + sum(data$companion == "Unknown")
unknown_perc = unknown_count / (ncol(data) * nrow(data)) * 100
missing_perc = na_perc + unknown_perc
689/nrow(data)*100
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
# df <- data.frame(data$n_child, age)
# Calculate the average age for each n_child value
avg_age <- tapply(data$age, data$n_child, mean)
# Create the scatter plot
plot(names(avg_age), avg_age, xlab = "n_child", ylab = "Average Age", main = "Average Age vs. n_child")
regression_model <- lm(data$age ~ data$n_child, data = data)
abline(regression_model, col = "blue")
?abline
abline(regression_model, col = "blue")
plot (data$n_child, data$age)
abline(regression_model, col = "blue")
