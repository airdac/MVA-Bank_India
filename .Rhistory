inspect(top5)
eclatDTrans<-eclat(dtrans, parameter = list(support=0.4, minlen=2, maxlen=10))
inspect(eclatDTrans)
## Mine frequent itemsets with Eclat.
eclatDTrans <- eclat(dtrans, parameter = list(supp = 0.5))
## Display the 5 itemsets with the highest support.
orderedItemsets <- sort(eclatDTrans)
inspect(orderedItemsets)
## Mine frequent itemsets with Eclat.
eclatDTrans <- eclat(dtrans, parameter = list(supp = 0.5))
## Display the 5 itemsets with the highest support.
orderedItemsets <- sort(eclatDTrans)
inspect(orderedItemsets)
## Mine frequent itemsets with Eclat.
eclatDTrans <- eclat(dtrans, parameter = list(supp = 0.5, confidence = 0.8))
?eclat
setwd("~/GitHub/bank_india")
#library of Association rules
library(arules)
library("arulesViz")
#some databases that are in form of transactions --> Read arules pdf users instructions
#setwd your own working directory to import the database
#How to work with associations rules with data matrix
dd <- read.table("2.Bank_India_preprocessed_data.csv",header=T, stringsAsFactors=TRUE, sep=",")
#Selecting categorical variables
dcat<-dd[,sapply(dd, is.factor)]
#Transforming our table as a transactional database
dtrans<-as(dcat, "transactions")
#[1] 5
foo<-function(x){length(levels(x))}
sum(sapply(dcat, foo))
#Checking our transactional database
dtrans
inspect(head(dtrans,10))
summary(dtrans)
itemFrequencyPlot(dtrans, topN=5)
itemFrequencyPlot(dtrans, support = 0.3)
#Apriori
?apriori
#minlen : minimun number of items
rulesDtrans <- apriori(dtrans, parameter = list(support = 0.1, confidence = 0.7, lift = 3, minlen=2))
rulesDtrans <- apriori(dtrans, parameter = list(support = 0.1, confidence = 0.7, minlen=2))
summary(rulesDtrans)
inspect(head(rulesDtrans,n=25, by="lift"))
inspect(head(rulesDtrans[which(rulesDtrans$lift > 3),],n=25, by="lift"))
which(rulesDtrans$lift > 3)
names(rulesDtrans)
rulesDtrans.lift
inspect(head(rulesDtrans[which(rulesDtrans[,5] > 3),],n=25, by="lift"))
class(rulesDtrans)
df.rules <- as.data.frame(rulesDtrans)
inspect(head(subset(rulesDtrans, subset = lift > 3),n=25, by="lift"))
good.rules <- subset(rulesDtrans, subset = lift > 3)
inspect(head(good.rules,n=25, by="lift"))
good.rules <- subset(rulesDtrans, subset = lift > 6)
inspect(head(good.rules,n=25, by="lift"))
good.rules <- subset(rulesDtrans, subset = lift > 5)
inspect(head(good.rules,n=25, by="lift"))
length(good.rules)
for (i in c(0.01,0.05,range(0.1,0.5,0.1))) {
print(i)
}
range(0.1,0.5,0.1)
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
}
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
append(good.rules, i)
}
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
good.rules <- append(good.rules, i)
}
good.rules <- NULL
good.rules = c()
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
good.rules <- append(good.rules, i)
}
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
i.rule <- apriori(dtrans, parameter =
list(support = i, confidence = 0.7, minlen=2))
good.rules <- append(good.rules, i.rule)
}
good.rules = c()
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
i.rule <- apriori(dtrans, parameter =
list(support = i, confidence = 0.7, minlen=2))
good.rules <- append(good.rules, i.rule)
}
length(good.rules)
good.rules = c()
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
i.rules <- apriori(dtrans, parameter =
list(support = i, confidence = 0.7, minlen=2))
i.good.rules <- subset(i.rules, subset = lift > 5)
good.rules <- append(good.rules, i.rule)
}
length(good.rules)
names(good.rules)
good.rules
summary(good.rules)
good.rules = c()
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
i.rules <- apriori(dtrans, parameter =
list(support = i, confidence = 0.7, minlen=2))
i.good.rules <- subset(i.rules, subset = lift > 5)
good.rules <- append(good.rules, i.good.rules)
}
summary(good.rules)
good.rules = c()
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
i.rules <- apriori(dtrans, parameter =
list(support = i, confidence = 0.7, minlen=2, maxlen = 10))
i.good.rules <- subset(i.rules, subset = lift > 5)
good.rules <- append(good.rules, i.good.rules)
}
summary(good.rules)
good.rules = c()
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
i.rules <- apriori(dtrans, parameter =
list(support = i, confidence = 0.7, minlen=2, maxlen = 6))
i.good.rules <- subset(i.rules, subset = lift > 5)
good.rules <- append(good.rules, i.good.rules)
}
good.rules = c()
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
i.rules <- apriori(dtrans, parameter =
list(support = i, confidence = 0.7, minlen=2, maxlen = 11))
i.good.rules <- subset(i.rules, subset = lift > 5)
good.rules <- append(good.rules, i.good.rules)
}
summary(good.rules)
source("~/GitHub/bank_india/Arules.R", echo=TRUE)
inspect(head(good.rules, n=10))
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=25, by="lift"))
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)-length(nonredundant)
length(good.rules)
length(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
setdiff(pensioners, unk_jobtype)
setdiff(unk_jobtype, pensioners)
inspect(sort(nonredundant, by="lift")[11:30,])
inspect(sort(nonredundant, by="lift")[9:30,])
good.rules = c()
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
i.rules <- apriori(dtrans, parameter =
list(support = i, confidence = 0.7, minlen=2, maxlen = 11))
i.good.rules <- subset(i.rules, subset = lift > 5)
good.rules <- append(good.rules, i.good.rules)
}
# Delete rules with a low support added multiple times
good.rules <- unique(good.rules)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
inspect(sort(nonredundant, by="lift")[9:30,])
inspect(head(nonredundant,n=10, by="lift"))
inspect(sort(nonredundant, by="lift")[9:30,])
pensioners = which(dcat$job_stat=="Pensioner")
unk_jobtype = which(dcat$job_type=="Jobtype_Unknown")
setdiff(pensioners, unk_jobtype)
setdiff(unk_jobtype, pensioners)
inspect(sort(nonredundant, by="lift")[9:30,])
unk_occupation <- which(dcat$occupation = "Occupation_Unknown")
setdiff(pensioners, unk_occupation)
setdiff(unk_occupation, pensioners)
unk_occupation <- which(dcat$occupation == "Occupation_Unknown")
setdiff(pensioners, unk_occupation)
setdiff(unk_occupation, pensioners)
unk_occupation <- which(dcat$occupation == "Occupation_Unknown")
setdiff(pensioners, unk_occupation)
?setdiff
length(setdiff(unk_occupation, pensioners))
levels(dcat$occupation)
levels(dcat$job_stat)
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- sort(subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &&
rhs %!in% "job_stat=Pensioner"),
by = "lift")
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- sort(subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &&
rhs %!in% "job_stat=Pensioner"),
by = "lift")
subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &&
rhs %!in% "job_stat=Pensioner")
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &&
rhs %!in% "job_stat=Pensioner")
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown")
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
rhs %!in% "job_stat=Pensioner")
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner"))
unk.occup.not.pensioner <- sort(unk.occup.not.pensioner, by = "lift")
head(unk.occup.not.pensioner, n=10, by="lift")
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% ("job_stat=Pensioner" || "job_type=Jobtype_Unknown")))
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% ("job_stat=Pensioner" | "job_type=Jobtype_Unknown")))
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown"))
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
good.rules = c()
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
i.rules <- apriori(dtrans, parameter =
list(support = i, confidence = 0.7, minlen=2, maxlen = 11))
i.good.rules <- subset(i.rules, subset = lift > 3)
good.rules <- append(good.rules, i.good.rules)
}
# Delete rules with a low support added multiple times
good.rules <- unique(good.rules)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
pensioners = which(dcat$job_stat=="Pensioner")
unk_jobtype = which(dcat$job_type=="Jobtype_Unknown")
setdiff(pensioners, unk_jobtype)
setdiff(unk_jobtype, pensioners)
inspect(sort(nonredundant, by="lift")[9:30,])
unk_occupation <- which(dcat$occupation == "Occupation_Unknown")
setdiff(pensioners, unk_occupation)
setdiff(unk_occupation, pensioners)
length(setdiff(unk_occupation, pensioners))
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown"))
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
good.rules = c()
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
i.rules <- apriori(dtrans, parameter =
list(support = i, confidence = 0.7, minlen=2, maxlen = 11))
i.good.rules <- subset(i.rules, subset = lift > 1)
good.rules <- append(good.rules, i.good.rules)
}
# Delete rules with a low support added multiple times
good.rules <- unique(good.rules)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
pensioners = which(dcat$job_stat=="Pensioner")
unk_jobtype = which(dcat$job_type=="Jobtype_Unknown")
setdiff(pensioners, unk_jobtype)
setdiff(unk_jobtype, pensioners)
inspect(sort(nonredundant, by="lift")[9:30,])
unk_occupation <- which(dcat$occupation == "Occupation_Unknown")
setdiff(pensioners, unk_occupation)
setdiff(unk_occupation, pensioners)
length(setdiff(unk_occupation, pensioners))
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown"))
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
good.rules = {}
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
i.rules <- apriori(dtrans, parameter =
list(support = i, confidence = 0.7, minlen=2, maxlen = 11))
i.good.rules <- subset(i.rules, subset = lift > 1)
good.rules <- append(good.rules, i.good.rules)
}
good.ruels
good.ruless
good.rules
good.rules = []
good.rules
good.rules = data.frame
god.rules
good.rules
good.rules
good.rules
good.rules = as.data.frame(c())
good.rules = as.data.frame(c())
good.rules
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
good.rules[,i] <- seq(0,100*i)
}
good.rules[,i] <- seq(0,100)
good.rules = as.data.frame(c())
for (i in c(0.01,0.05,seq(0.1,0.5,0.1))) {
print(i)
good.rules[,i] <- seq(0,100)
}
rules <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(i.rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
inspect(head(good.rules, n=10, by = "lift"))
good.rules <- NULL
rules <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(i.rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
good.rules <- NULL
rules <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
pensioners = which(dcat$job_stat=="Pensioner")
unk_jobtype = which(dcat$job_type=="Jobtype_Unknown")
setdiff(pensioners, unk_jobtype)
setdiff(unk_jobtype, pensioners)
inspect(sort(nonredundant, by="lift")[9:30,])
summary(good.rules)
unk_occupation <- which(dcat$occupation == "Occupation_Unknown")
setdiff(pensioners, unk_occupation)
setdiff(unk_occupation, pensioners)
length(setdiff(unk_occupation, pensioners))
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown"))
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
length(unk.occup.not.pensioner)
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
#library of Association rules
library(arules)
library("arulesViz")
dd <- read.table("2.Bank_India_preprocessed_data.csv",header=T, stringsAsFactors=TRUE, sep=",")
#Selecting categorical variables
dcat<-dd[,sapply(dd, is.factor)]
dtrans<-as(dcat, "transactions")
foo<-function(x){length(levels(x))}
sum(sapply(dcat, foo))
#Checking our transactional database
dtrans
inspect(head(dtrans,10))
summary(dtrans)
itemFrequencyPlot(dtrans, topN=5)
itemFrequencyPlot(dtrans, support = 0.3)
#Apriori
?apriori
rules <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
rules <- apriori(dtrans, parameter =
list(support = 0.1, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
rules <- apriori(dtrans, parameter =
list(support = 0.5, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
rules <- apriori(dtrans, parameter =
list(support = 0.4, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
rules <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
good.rules <- nonredundant
inspect(head(good.rules, n=10, by = "lift"))
inspect(sort(good.rules[11:30], by = "lift"))
inspect(sort(good.rules[:30], by = "lift"))
inspect(sort(good.rules[:30,], by = "lift"))
inspect(sort(good.rules[1:30,], by = "lift"))
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
#library of Association rules
library(arules)
library("arulesViz")
dd <- read.table("2.Bank_India_preprocessed_data.csv",header=T, stringsAsFactors=TRUE, sep=",")
#Selecting categorical variables
dcat<-dd[,sapply(dd, is.factor)]
dtrans<-as(dcat, "transactions")
foo<-function(x){length(levels(x))}
sum(sapply(dcat, foo))
#Checking our transactional database
dtrans
inspect(head(dtrans,10))
summary(dtrans)
itemFrequencyPlot(dtrans, topN=5)
itemFrequencyPlot(dtrans, support = 0.3)
#Apriori
?apriori
rules <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(rules, subset = lift > 1)
good.rules <- subset(rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
good.rules <- nonredundant
inspect(sort(good.rules[1:30,], by = "lift"))
inspect(sort(nonredundant[1:30,], by = "lift"))
inspect(head(nonredundant,n=10, by="lift"))
inspect(sort(nonredundant, by = "lift")[1:30,])
pensioners = which(dcat$job_stat=="Pensioner")
unk_jobtype = which(dcat$job_type=="Jobtype_Unknown")
setdiff(pensioners, unk_jobtype)
setdiff(unk_jobtype, pensioners)
inspect(sort(good.rules, by="lift"))[9:30,]
unk_occupation <- which(dcat$occupation == "Occupation_Unknown")
setdiff(pensioners, unk_occupation)
setdiff(unk_occupation, pensioners)
length(setdiff(unk_occupation, pensioners))
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown"))
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
inspect(sort(good.rules, by="lift"))[9:30,]
inspect(sort(good.rules, by="lift")[9:30,])
inspect(sort(good.rules, by="lift")[1:30,])
# Now we will analyze the category Occupation_Unknown.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown"))
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
# Now we will analyze the category Occupation_Unknown.
inspect(head(good.rules, n=10, by="lift"))
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
