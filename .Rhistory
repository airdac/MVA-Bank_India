inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
# We'll try now to reverse the rules
unk.occup.not.pensioner2 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
length(lhs) == 5)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
# We'll try now to reverse the rules
unk.occup.not.pensioner2 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
length(lhs) == 10)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
# We'll try now to reverse the rules
unk.occup.not.pensioner2 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown"))
#&
#                                  length(lhs) == 10)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
# We'll try now to reverse the rules
unk.occup.not.pensioner2 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
length(lhs) <= 30)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
# We'll try now to reverse the rules
unk.occup.not.pensioner2 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
length(lhs) <= 100)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
good.rules$lhs
names(lhs)
names(good.ruels)
names(good.rules)
class(good.rules)
# We'll try now to reverse the rules
unk.occup.not.pensioner2 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 100)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
# We'll try now to reverse the rules
unk.occup.not.pensioner2 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 2)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
# We'll try now to reverse the rules
unk.occup.not.pensioner2 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 5)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
# We'll try now to reverse the rules
unk.occup.not.pensioner2 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 4)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
# We'll try now to reverse the rules
unk.occup.not.pensioner2 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 5)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
# Now we will analyze the category unk_occupation.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 5)
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
# Now we will analyze the category unk_occupation.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 4)
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
# Now we will analyze the category unk_occupation.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 3)
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
# Now we will analyze the category unk_occupation.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 2)
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
# Now we will analyze the category unk_occupation.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 1)
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
unk.occup.not.pensioner2 <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 1)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
# We'll try now to reverse the rules
unk.occup.not.pensioner3 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 5)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
unk.occup.not.pensioner4 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 4)
# We'll study nowthe simplest rules
rules <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 2))
good.rules <- subset(rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
good.rules <- nonredundant
inspect(head(nonredundant,n=10, by="lift"))
inspect(head(nonredundant,n=10, by="lift"))
inspect(head(good.rules, n=10, by="lift"))
inspect(head(good.rules, n=25, by="lift"))
payedRules <- sort(subset(rulesDtrans, subset = rhs %in% "target=payed"), by = "confidence")
summary(payedRules)   # lift is too low
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
#library of Association rules
library(arules)
library("arulesViz")
dd <- read.table("2.Bank_India_preprocessed_data.csv",header=T, stringsAsFactors=TRUE, sep=",")
#Selecting categorical variables
dcat<-dd[,sapply(dd, is.factor)]
dtrans<-as(dcat, "transactions")
foo<-function(x){length(levels(x))}
sum(sapply(dcat, foo))
#Checking our transactional database
dtrans
inspect(head(dtrans,10))
summary(dtrans)
itemFrequencyPlot(dtrans, topN=5)
itemFrequencyPlot(dtrans, support = 0.3)
rules <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
good.rules <- nonredundant
pensioners = which(dcat$job_stat=="Pensioner")
unk_jobtype = which(dcat$job_type=="Jobtype_Unknown")
setdiff(pensioners, unk_jobtype)
setdiff(unk_jobtype, pensioners)
inspect(sort(good.rules, by="lift")[9:30,])
unk_occupation <- which(dcat$occupation == "Occupation_Unknown")
setdiff(pensioners, unk_occupation)
setdiff(unk_occupation, pensioners)
length(setdiff(unk_occupation, pensioners))
# Now we will analyze the category unk_occupation.
unk.occup.not.pensioner <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown"))
inspect(head(unk.occup.not.pensioner, n=10, by="lift"))
unk.occup.not.pensioner2 <- subset(good.rules, subset =
lhs %in% "occupation=Occupation_Unknown" &
!(rhs %in% "job_stat=Pensioner") &
!(rhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 1)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
# We'll try now to reverse the rules
unk.occup.not.pensioner3 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 5)
inspect(head(unk.occup.not.pensioner2, n=10, by="lift"))
unk.occup.not.pensioner4 <- subset(good.rules, subset =
rhs %in% "occupation=Occupation_Unknown" &
!(lhs %in% "job_stat=Pensioner") &
!(lhs %in% "job_type=Jobtype_Unknown") &
size(lhs) <= 4)
inspect(head(unk.occup.not.pensioner4, n=10, by="lift"))
# We'll study nowthe simplest rules
rules2 <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 2))
good.rules2 <- subset(rules2, subset = lift > 1)
inspect(head(good.rules2, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant2 <- good.rules2[!is.redundant(good.rules2),]
summary(nonredundant2)
inspect(head(nonredundant2,n=10, by="lift"))
length(good.rules2)
length(nonredundant2)
good.rules2 <- nonredundant2
inspect(head(good.rules2, n=25, by="lift"))
# We will study now our target.
payedRules <- sort(subset(good.rules, subset = rhs %in% "target=payed"), by = "confidence")
summary(payedRules)   # lift is too low
overdueRules <- sort(subset(rulesDtrans, subset = rhs %in% "target=overdue"), by = "confidence")
summary(overdueRules)   # None found
overdueRules <- sort(subset(good.rules, subset = rhs %in% "target=overdue"), by = "confidence")
summary(overdueRules)   # None found
inspect(head(payedRules, n=10, by="lift")
inspect(head(payedRules, n=10, by="lift"))
# We will study now our target.
payedRules <- sort(subset(good.rules, subset = rhs %in% "target=payed"), by = "confidence")
summary(payedRules)   # lift is too low
inspect(head(payedRules, n=10, by="lift"))
payedRules2 <- sort(subset(good.rules, subset = lhs %in% "target=payed"), by = "confidence")
inspect(head(payedRules2, n=10, by="lift"))
payedRules3 <- sort(subset(good.rules2, subset = lhs %in% "target=payed"), by = "confidence")
inspect(head(payedRules3, n=10, by="lift"))
payedRules3 <- sort(subset(good.rules, subset = lhs %in% "target=payed"), by = "confidence",
size(rhs) <= 3)
inspect(head(payedRules3, n=10, by="lift"))
payedRules3 <- sort(subset(good.rules, subset = lhs %in% "target=payed"), by = "confidence" &
size(rhs) <= 3)
inspect(head(payedRules3, n=10, by="lift"))
payedRules3 <- sort(subset(good.rules, subset = lhs %in% "target=payed") &
size(rhs) <= 3, by = "confidence")
inspect(head(payedRules3, n=10, by="lift"))
payedRules3 <- sort(subset(good.rules, subset = lhs %in% "target=payed" &
size(rhs) <= 3), by = "confidence")
inspect(head(payedRules3, n=10, by="lift"))
payedRules3 <- sort(subset(good.rules, subset = lhs %in% "target=payed" &
size(lhs) <= 3), by = "confidence")
inspect(head(payedRules3, n=10, by="lift"))
payedRules3 <- sort(subset(good.rules, subset = lhs %in% "target=payed" &
size(lhs) <= 2), by = "confidence")
inspect(head(payedRules3, n=10, by="lift"))
overdueRules <- sort(subset(good.rules, subset = rhs %in% "target=overdue"), by = "confidence")
summary(overdueRules)
overdueRules2 <- sort(subset(good.rules, subset = lhs %in% "target=overdue"), by = "confidence")
summary(overdueRules2)
# We will study now our target.
payedRules <- sort(subset(good.rules, subset = rhs %in% "target=payed"), by = "lift")
summary(payedRules)
inspect(head(payedRules, n=10, by="lift"))
payedRules2 <- sort(subset(good.rules, subset = lhs %in% "target=payed"), by = "lift")
inspect(head(payedRules2, n=10, by="lift"))
payedRules3 <- sort(subset(good.rules, subset = lhs %in% "target=payed" &
size(lhs) <= 2), by = "lift")
inspect(head(payedRules3, n=10, by="lift"))
overdueRules <- sort(subset(good.rules, subset = rhs %in% "target=overdue"), by = "lift")
summary(overdueRules)
overdueRules2 <- sort(subset(good.rules, subset = lhs %in% "target=overdue"), by = "lift")
summary(overdueRules2)
inspect(head(payedRules3, n=10, by="lift"))
summary(overdueRules2)
inspect(head(payedRules3, n=10, by="lift"))
overdueRules3 <- sort(subset(good.rules, subset = lhs %in% "target=overdue" &
size(lhs) <= 2), by = "lift")
inspect(head(payedRules3, n=10, by="lift"))
inspect(head(overdueRules3, n=10, by="lift"))
# FILTER BY TARGET = OVERDUE
dd <- dd[which(target=='overdue'),]
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
#library of Association rules
library(arules)
library("arulesViz")
dd <- read.table("2.Bank_India_preprocessed_data.csv",header=T, stringsAsFactors=TRUE, sep=",")
# FILTER BY TARGET = OVERDUE
dd <- dd[which(target=='overdue'),]
# FILTER BY TARGET = OVERDUE
dd <- dd[which(dd$target=='overdue'),]
dd <- read.table("2.Bank_India_preprocessed_data.csv",header=T, stringsAsFactors=TRUE, sep=",")
dd <- read.table("2.Bank_India_preprocessed_data.csv",header=T, stringsAsFactors=TRUE, sep=",")
# FILTER BY TARGET = OVERDUE
dd <- dd[which(dd$target=='overdue'),]
#Selecting categorical variables
dcat<-dd[,sapply(dd, is.factor)]
dtrans<-as(dcat, "transactions")
foo<-function(x){length(levels(x))}
sum(sapply(dcat, foo))
#Checking our transactional database
dtrans
inspect(head(dtrans,10))
summary(dtrans)
itemFrequencyPlot(dtrans, topN=5)
itemFrequencyPlot(dtrans, support = 0.3)
rules <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
good.rules <- nonredundant
inspect(head(good.rules, n=10, by="lift"))
inspect(head(good.rules, n=30, by="lift"))
overdueRules <- sort(subset(good.rules, subset = rhs %in% "target=overdue"), by = "lift")
summary(overdueRules)
overdueRules <- sort(subset(good.rules, subset = lhs %in% "target=overdue"), by = "lift")
summary(overdueRules)
overdueRules <- sort(subset(good.rules, subset = lhs %in% "target=overdue"), by = "lift")
summary(overdueRules)
table(summary(dd$target))
dd$target
summary(dd$target)
overdueRules <- sort(subset(good.rules, subset = lhs %in% "target=overdue"), by = "lift")
summary(overdueRules)
overdueRules <- sort(subset(good.rules, subset = rhs %in% "target=overdue"), by = "lift")
summary(overdueRules)
inspect(head(good.rules, n=30, by="lift"))
dd.overdue <- dd[which(dd$target=='overdue'),]
dd.target <- dd[sample(dd, length(dd.overdue)),]
sample(dd, length(dd.overdue))
dd.target <- sample(dd, length(dd.overdue))
dd.balanced <- rbind(dd.overdue, dd.target)
dd <- read.table("2.Bank_India_preprocessed_data.csv",header=T, stringsAsFactors=TRUE, sep=",")
dd.overdue <- dd[which(dd$target=='overdue'),]
dd.target <- sample(dd, length(dd.overdue))
dd.balanced <- rbind(dd.overdue, dd.target)
summary(dd.balanced)
dd.target.original <- dd[which(dd$target=='target'),]
# EDA of the sample
create_report(dd.target)
library(DataExplorer)
# EDA of the sample
create_report(dd.target)
# EDA of the original dataset
create_report(dd.target.original)
# EDA of the original dataset
create_report(dd.target.original)
# EDA of the sample
create_report(dd.target)
# EDA of the original dataset
create_report(dd.target.original)
dd.target.original <- dd[which(dd$target=='payed'),]
# EDA of the original dataset
create_report(dd.target.original)
dd.target.original <- dd[which(dd$target=='payed'),]
dd.target <- sample(dd.target.original, length(dd.overdue))
# EDA of the sample
create_report(dd.target)
# EDA of the original dataset
create_report(dd.target.original)
length(dd.target)
length(dd.target.original)
dim(dd.overdue)[2]
dim(dd.overdue)[1]
set.seed(123)
dd.target.original <- dd[which(dd$target=='payed'),]
dd.target <- sample(dd.target.original, dim(dd.overdue)[1])
# EDA of the sample
create_report(dd.target)
# EDA of the original dataset
create_report(dd.target.original)
summary(dd.target)
dim(dd.overdue)[1]
set.seed(123)
dd.target.original <- dd[which(dd$target=='payed'),]
dd.target <- sample(dd.target.original, size=dim(dd.overdue)[1])
# EDA of the sample
create_report(dd.target)
# EDA of the original dataset
create_report(dd.target.original)
summary(dd.target)
summary(dd.target)
summary(dd.target)
set.seed(123)
dd.target.original <- dd[which(dd$target=='payed'),]
dd.target <- dd.target.original[sample(nrow(dd.target.original), nrow(dd.overdue)), ]
# EDA of the sample
create_report(dd.target)
# EDA of the original dataset
create_report(dd.target.original)
)
dd.balanced <- rbind(dd.overdue, dd.target)
summary(dd.balanced)
rules <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(rules, subset = lift > 2)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
inspect(head(good.rules, n=30, by="lift"))
# We will study now our target.
payedRules <- sort(subset(good.rules, subset = rhs %in% "target=payed"), by = "lift")
summary(payedRules)
inspect(head(payedRules, n=10, by="lift"))
payedRules2 <- sort(subset(good.rules, subset = lhs %in% "target=payed"), by = "lift")
inspect(head(payedRules2, n=10, by="lift"))
#payedRules3 <- sort(subset(good.rules, subset = lhs %in% "target=payed" &
#size(lhs) <= 2), by = "lift")
#inspect(head(payedRules3, n=10, by="lift"))
overdueRules <- sort(subset(good.rules, subset = rhs %in% "target=overdue"), by = "lift")
summary(overdueRules)
overdueRules2 <- sort(subset(good.rules, subset = lhs %in% "target=overdue"), by = "lift")
summary(overdueRules2)
overdueRules3 <- sort(subset(good.rules, subset = lhs %in% "target=overdue" &
size(lhs) <= 2), by = "lift")
inspect(head(overdueRules3, n=10, by="lift"))
rules <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
good.rules <- nonredundant
inspect(head(good.rules, n=30, by="lift"))
# We will study now our target.
payedRules <- sort(subset(good.rules, subset = rhs %in% "target=payed"), by = "lift")
summary(payedRules)
inspect(head(payedRules, n=10, by="lift"))
payedRules2 <- sort(subset(good.rules, subset = lhs %in% "target=payed"), by = "lift")
inspect(head(payedRules2, n=10, by="lift"))
#payedRules3 <- sort(subset(good.rules, subset = lhs %in% "target=payed" &
#size(lhs) <= 2), by = "lift")
#inspect(head(payedRules3, n=10, by="lift"))
overdueRules <- sort(subset(good.rules, subset = rhs %in% "target=overdue"), by = "lift")
summary(overdueRules)
overdueRules2 <- sort(subset(good.rules, subset = lhs %in% "target=overdue"), by = "lift")
summary(overdueRules2)
overdueRules3 <- sort(subset(good.rules, subset = lhs %in% "target=overdue" &
size(lhs) <= 2), by = "lift")
inspect(head(overdueRules3, n=10, by="lift"))
# We will study now our target.
payedRules <- sort(subset(good.rules, subset = rhs %in% "target=payed"), by = "lift")
summary(payedRules)
inspect(head(payedRules, n=10, by="lift"))
payedRules2 <- sort(subset(good.rules, subset = lhs %in% "target=payed"), by = "lift")
#payedRules3 <- sort(subset(good.rules, subset = lhs %in% "target=payed" &
#size(lhs) <= 2), by = "lift")
#inspect(head(payedRules3, n=10, by="lift"))
overdueRules <- sort(subset(good.rules, subset = rhs %in% "target=overdue"), by = "lift")
summary(overdueRules)
overdueRules2 <- sort(subset(good.rules, subset = lhs %in% "target=overdue"), by = "lift")
summary(overdueRules2)
overdueRules3 <- sort(subset(good.rules, subset = lhs %in% "target=overdue" &
size(lhs) <= 2), by = "lift")
inspect(head(overdueRules3, n=10, by="lift"))
summary(overdueRules3)
summary(good.rules)
dcat<-dd[,sapply(dd, is.factor)]
dtrans<-as(dcat, "transactions")
rules <- apriori(dtrans, parameter =
list(support = 0.01, confidence = 0.7, minlen=2, maxlen = 11))
good.rules <- subset(rules, subset = lift > 1)
inspect(head(good.rules, n=10, by = "lift"))
# Before doing any feature selection, let us remove redundant rules
nonredundant <- good.rules[!is.redundant(good.rules),]
summary(nonredundant)
inspect(head(nonredundant,n=10, by="lift"))
length(good.rules)
length(nonredundant)
good.rules <- nonredundant
inspect(head(good.rules, n=30, by="lift"))
# We will study now our target.
payedRules <- sort(subset(good.rules, subset = rhs %in% "target=payed"), by = "lift")
summary(payedRules)
inspect(head(payedRules, n=10, by="lift"))
# Too low lifts
payedRules2 <- sort(subset(good.rules, subset = lhs %in% "target=payed"), by = "lift")
inspect(head(payedRules2, n=10, by="lift"))
#size(lhs) <= 2), by = "lift")
payedRules3 <- sort(subset(good.rules, subset = lhs %in% "target=payed" &
size(lhs) <= 2), by = "lift")
inspect(head(payedRules3, n=10, by="lift"))
overdueRules <- sort(subset(good.rules, subset = rhs %in% "target=overdue"), by = "lift")
summary(overdueRules)
overdueRules2 <- sort(subset(good.rules, subset = lhs %in% "target=overdue"), by = "lift")
summary(overdueRules2)
overdueRules3 <- sort(subset(good.rules, subset = lhs %in% "target=overdue" &
size(lhs) <= 2), by = "lift")
summary(overdueRules3)
inspect(head(overdueRules3, n=10, by="lift"))
