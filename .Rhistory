install.packages(c("covr", "Matrix"))
dd <- read.table("1. Bank-India-preprocessed-data.csv",header=T, stringsAsFactors=TRUE, sep=";")
pwd
pwd()
setwd("C:/Users/Airdac/Documents/GitHub/bank_india")
dd <- read.table("1. Bank-India-preprocessed-data.csv",header=T, stringsAsFactors=TRUE, sep=";")
dd <- read.table("2. Bank-India-preprocessed-data.csv",header=T, stringsAsFactors=TRUE, sep=";")
source("~/GitHub/bank_india/Arules.R", echo=TRUE)
dd <- read.table("2.Bank-India-preprocessed-data.csv",header=T, stringsAsFactors=TRUE, sep=";")
dd <- read.table("2.Bank_India_preprocessed_data.csv",header=T, stringsAsFactors=TRUE, sep=";")
ls
dd <- read.table("2.Bank_India_preprocessed_data.csv",header=T, stringsAsFactors=TRUE, sep=";")
dd
view(dd)
show(dd)
dd <- read.table("2.Bank_India_preprocessed_data.csv",header=T, stringsAsFactors=TRUE, sep=",")
#Selecting categorical variables
dcat<-dd[,sapply(dd, is.factor)]
dtrans<-as(dcat, "transactions")
#Checking our transactional database
dtrans
show(dtrans)
inspect(head(dtrans,10))
foo<-function(x){length(levels(x))}
plot(size(dtrans))
transactionInfo(Epub[1:10])
summary(dtrans)
itemFrequencyPlot(dtrans, topN=5, cex.names = 1)
itemFrequencyPlot(dtrans, topN=5, cex.names = 2)
itemFrequencyPlot(dtrans, topN=5, cex.names = 1)
itemFrequencyPlot(dtrans, support=0.1, cex.names = 1)
itemFrequencyPlot(dtrans, topN=5, cex.names = 19)
itemFrequencyPlot(dtrans, topN=5, cex.names = 3)
itemFrequencyPlot(dtrans, topN=5, cex.names = 2)
itemFrequencyPlot(dtrans, topN=5, cex.names = 1)
itemFrequencyPlot(dtrans, topN=5, cex.names = 1)
#library of Association rules
library(arules)
library("arulesViz")
#some databases that are in form of transactions --> Read arules pdf users instructions
#setwd your own working directory to import the database
#How to work with associations rules with data matrix
dd <- read.table("2.Bank_India_preprocessed_data.csv",header=T, stringsAsFactors=TRUE, sep=",")
#Selecting categorical variables
dcat<-dd[,sapply(dd, is.factor)]
#Transforming our table as a transactional database
dtrans<-as(dcat, "transactions")
#[1] 5
foo<-function(x){length(levels(x))}
sum(sapply(dcat, foo))
#Checking our transactional database
dtrans
inspect(head(dtrans,10))
summary(dtrans)
itemFrequencyPlot(dtrans, topN=5, cex.names = 1)
itemFrequencyPlot(dtrans, topN=5, cex.names = 1)
itemFrequencyPlot(dtrans, topN=5, cex.names = 2)
itemFrequencyPlot(dtrans, topN=5)
itemFrequencyPlot(dtrans, support=0.1)
itemFrequencyPlot(dtrans)
itemFrequencyPlot(dtrans, suport = 0.3)
itemFrequencyPlot(dtrans, support = 0.3)
rulesDtrans <- apriori(dtrans, parameter = list(support = 0.1, confidence = 0.5,  minlen=2))
summary(rulesDtrans)
inspect(rulesDtrans)
items<-apriori(dtrans, parameter = list(sup = 0.2,  target="frequent itemsets", minlen=2))
inspect(items)
items<-apriori(dtrans, parameter = list(sup = 0.2,  target="target", minlen=2))
rulesDtrans <- apriori(dtrans, parameter = list(support = 0.4, confidence = 0.8,  minlen=2))
inspect(rulesDtrans)
inspect(head(rulesDtrans,n=3, by="lift"))
rulesDtrans <- apriori(dtrans, parameter = list(support = 0.1, confidence = 0.5,  minlen=2))
inspect(rulesDtrans)
summary(rulesDtrans)
inspect(head(rulesDtrans,n=3, by="lift"))
inspect(head(rulesDtrans,n=10, by="lift"))
library(car)
# It looks like the set of Pensioners is the same as the set of people who
# didn't tell their job type. Indeed, it is true.
pensioners = which(dcat$job_stat=="Pensioner")
unk_jobtype = which(dcat$job_type=="Jobtype_Unkown")
setdiff(pensioneers, unk_jobtype)
setdiff(pensioners, unk_jobtype)
unk_jobtype
unk_jobtype = which(dcat$job_type=="Jobtype_Unknown")
unk_jobtype
setdiff(pensioners, unk_jobtype)
setiff(pensioners, unk_jobtype)
setdiff(pensioners, unk_jobtype)
pensioners == unk_jobtype
sum(pensioners == unk_jobtype) == length(pensioners) == length(unk_jobtype)
sum(pensioners == unk_jobtype)
length(pensioners)
length(unk_jobtype)
inspect(head(rulesDtrans,n=25, by="lift"))
rulesDtrans <- apriori(dtrans, parameter = list(support = 0.4, confidence = 0.8,  minlen=2))
inspect(head(rulesDtrans,n=25, by="lift"))
payedRules <- sort(subset(rulesDtrans, subset = rhs %in% "payed"), by = "confidence")
rulesDtrans <- apriori(dtrans, parameter = list(support = 0.1, confidence = 0.5,  minlen=2))
payedRules <- sort(subset(rulesDtrans, subset = rhs %in% "payed"), by = "confidence")
payedRules <- sort(subset(rulesDtrans, subset = rhs %in% "target=payed"), by = "confidence")
summary(payedRules)
overdueRules <- sort(subset(rulesDtrans, subset = rhs %in% "target=overdue"), by = "confidence")
summary(overdueRules)   # lift is too low
summary(payedRules)   # lift is too low
summary(overdueRules)   # lift is too low
overdueRules <- sort(subset(rulesDtrans, subset = rhs %in% "target=overdue"), by = "confidence")
summary(overdueRules)   # lift is too low
rulesDtrans <- apriori(dtrans, parameter = list(support = 0.1, confidence = 0.1,  minlen=2))
overdueRules <- sort(subset(rulesDtrans, subset = rhs %in% "target=overdue"), by = "confidence")
summary(overdueRules)   # lift is too low
rulesDtrans <- apriori(dtrans, parameter = list(support = 0.01, confidence = 0.5,  minlen=2))
overdueRules <- sort(subset(rulesDtrans, subset = rhs %in% "target=overdue"), by = "confidence")
summary(overdueRules)   # lift is too low
#
subset.matrix <- is.subset(rulesDtrans,rulesDtrans,sparse = F)
rules.pruned <- rulesDtrans[!redundant]
rules.pruned <- sort(rules.pruned,by="lift")
inspect(rules.pruned)
rulesDtrans <- apriori(dtrans, parameter = list(support = 0.01, confidence = 0.5,  minlen=2))
is.redundant(rulesDtrans)
# Non redundant rules
nonredundant <- rulesDtrans(!is.redundant(rulesDtrans))
# Non redundant rules
nonredundant <- rulesDtrans[!is.redundant(rulesDtrans),]
summary(nonredundant)
summary(rulesDtrans)
rulesDtrans <- apriori(dtrans, parameter = list(support = 0.1, confidence = 0.5,  minlen=2))
# Non redundant rules
nonredundant <- rulesDtrans[!is.redundant(rulesDtrans),]
summary(nonredundant)
summary(rulesDtrans)
inspect(head(rulesDtrans,n=25, by="lift"))
payedRules <- sort(subset(rulesDtrans, subset = rhs %in% "target=payed"), by = "confidence")
summary(payedRules)   # lift is too low
overdueRules <- sort(subset(rulesDtrans, subset = rhs %in% "target=overdue"), by = "confidence")
summary(overdueRules)   # lift is too low
inspect(head(payedRules, n=25, by="lift")
inspect(head(payedRules, n=25, by="lift"))
payedRules <- sort(subset(rulesDtrans, subset = rhs %in% "target=payed"), by = "confidence")
summary(payedRules)   # lift is too low
inspect(head(payedRules, n=25, by="lift"))
eclatDTrans<-eclat(dtrans)
eclatDTrans<-eclat(dtrans, parameter = list(support=0.4, minlen=1, maxlen=10))
inspect(eclatDTrans)
## Mine frequent itemsets with Eclat.
eclatDTrans <- eclat(dtrans, parameter = list(supp = 0.5))
## Display the 5 itemsets with the highest support.
orderedItemsets <- sort(eclatDTrans)
inspect(orderedItemsets)
top5 <- sort(eclatDTrans)[1:5]
inspect(top5)
###Visualizing Results
inspect(rulesDtrans)
plot(rulesDtrans, measure = c("support", "lift"), shading = "confidence")
#order == number of items inside the rules
plot(rulesDtrans, method = "two-key plot")
plot(rulesDtrans, method = "grouped")
plot(rulesDtrans, method = "paracoord")
rulesDtrans <- apriori(dtrans, parameter = list(support = 0.1, confidence = 0.5,  minlen=2))
summary(rulesDtrans)
inspect(head(rulesDtrans,n=25, by="lift"))
# It looks like the set of Pensioners is the same as the set of people who
# didn't tell their job type. Indeed, it is true.
pensioners = which(dcat$job_stat=="Pensioner")
unk_jobtype = which(dcat$job_type=="Jobtype_Unknown")
setdiff(pensioners, unk_jobtype)
setdiff(unk_jobtype, pensioners)
payedRules <- sort(subset(rulesDtrans, subset = rhs %in% "target=payed"), by = "confidence")
overdueRules <- sort(subset(rulesDtrans, subset = rhs %in% "target=overdue"), by = "confidence")
summary(overdueRules)   # None found
eclatDTrans<-eclat(dtrans)
eclatDTrans<-eclat(dtrans, parameter = list(support=0.4, minlen=1, maxlen=10))
inspect(eclatDTrans)
## Mine frequent itemsets with Eclat.
eclatDTrans <- eclat(dtrans, parameter = list(supp = 0.5))
## Display the 5 itemsets with the highest support.
orderedItemsets <- sort(eclatDTrans)
inspect(orderedItemsets)
top5 <- sort(eclatDTrans)[1:5]
inspect(top5)
eclatDTrans<-eclat(dtrans, parameter = list(support=0.4, minlen=2, maxlen=10))
inspect(eclatDTrans)
## Mine frequent itemsets with Eclat.
eclatDTrans <- eclat(dtrans, parameter = list(supp = 0.5))
## Display the 5 itemsets with the highest support.
orderedItemsets <- sort(eclatDTrans)
inspect(orderedItemsets)
## Mine frequent itemsets with Eclat.
eclatDTrans <- eclat(dtrans, parameter = list(supp = 0.5))
## Display the 5 itemsets with the highest support.
orderedItemsets <- sort(eclatDTrans)
inspect(orderedItemsets)
## Mine frequent itemsets with Eclat.
eclatDTrans <- eclat(dtrans, parameter = list(supp = 0.5, confidence = 0.8))
?eclat
