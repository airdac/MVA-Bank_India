legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
table<-table(dades[,k],P)
print("Cross Table:")
print(table)
print("Distribucions condicionades a columnes:")
print(colperc)
#diagrames de barres apilades
paleta<-rainbow(length(levels(dades[,k])))
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
#diagrames de barres adosades
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta )
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta)
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
print("Test Chi quadrat: ")
print(chisq.test(dades[,k], as.factor(P)))
print("valorsTest:")
print( ValorTestXquali(P,dades[,k]))
#calcular els pvalues de les quali
}
}
}#endfor
#descriptors de les classes més significatius. Afegir info qualits
for (c in 1:length(levels(as.factor(P)))) {
if(!is.na(levels(as.factor(P))[c])){
print(paste("P.values per class:",levels(as.factor(P))[c]));
print(sort(pvalk[c,]), digits=3)
}
}
#afegir la informacio de les modalitats de les qualitatives a la llista de pvalues i fer ordenacio global
#saving the dataframe in an external file
#write.table(dd, file = "credscoClean.csv", sep = ";", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
kruskal.test(loan ~ c2)
kruskal.test(loan ~ c2)
kruskal.test(n_child ~ c2)
kruskal.test(loan ~ c2)
kruskal.test(Job_stat ~ c2)
kruskal.test(loan ~ c2)
kruskal.test(job_stat ~ c2)
kruskal.test(loan ~ c2)
kruskal.test(studies ~ c2)
kruskal.test(loan ~ c2)
kruskal.test(family ~ c2)
kruskal.test(loan ~ c2)
kruskal.test(house ~ c2)
kruskal.test(loan ~ c2)
kruskal.test(age ~ c2)
kruskal.test(loan ~ c2)
kruskal.test(job_type ~ c2)
kruskal.test(income ~ c2)
kruskal.test(job_duration ~ c2)
kruskal.test(income ~ c2)
kruskal.test(occupation ~ c2)
kruskal.test(income ~ c2)
kruskal.test(target ~ c2)
kruskal.test(gender ~ c2)
kruskal.test(car ~ c2)
names(dd)
# Make statistical tests
cluster1_target = dd[which(c2 == 1),10]
cluster2_target = dd[which(c2 == 2),10]
summary(cluster1_target)
summary(cluster2_target)
# Make statistical tests
cluster1_target = dd[which(c2 == 1),10]
cluster2_target = dd[which(c2 == 2),10]
summary(cluster1_target)
summary(cluster2_target)
plot(cluster1_target, cluster2_target)
# Make statistical tests
cluster1_target = dd[which(c2 == 1),10]
cluster2_target = dd[which(c2 == 2),10]
summary(cluster1_target)
summary(cluster2_target)
ExpReport(cluster1_target, op_file = 'SmartEDA_cluster1.html4')
# Make statistical tests
cluster1_target = dd[which(c2 == 1),10]
cluster2_target = dd[which(c2 == 2),10]
summary(cluster1_target)
summary(cluster2_target)
library(SmartEDA)
ExpReport(cluster1_target, op_file = 'SmartEDA_cluster1.html4')
# Make statistical tests
cluster1_target = data.frame(dd[which(c2 == 1),10])
cluster2_target = data.frame(dd[which(c2 == 2),10])
summary(cluster1_target)
summary(cluster2_target)
library(SmartEDA)
ExpReport(cluster1_target, op_file = 'SmartEDA_cluster1.html4')
# Make statistical tests
cluster1_target = data.frame(dd[which(c2 == 1),10])
cluster2_target = data.frame(dd[which(c2 == 2),10])
summary(cluster1_target)
summary(cluster2_target)
library(SmartEDA)
create_report(cluster1_target, op_file = 'SmartEDA_cluster1.html4')
# Make statistical tests
cluster1_target = data.frame(dd[which(c2 == 1),10])
cluster2_target = data.frame(dd[which(c2 == 2),10])
summary(cluster1_target)
summary(cluster2_target)
library(SmartEDA)
create_report(cluster1_target, op_file = 'SmartEDA_cluster1.html4')
library(SmartEDA)
# Make statistical tests
cluster1_target = data.frame(dd[which(c2 == 1),10])
cluster2_target = data.frame(dd[which(c2 == 2),10])
summary(cluster1_target)
summary(cluster2_target)
library(DataExplorer)
create_report(cluster1_target, op_file = 'SmartEDA_cluster1.html4')
# Make statistical tests
cluster1_target = data.frame(dd[which(c2 == 1),10])
cluster2_target = data.frame(dd[which(c2 == 2),10])
summary(cluster1_target)
summary(cluster2_target)
library(DataExplorer)
create_report(cluster1_target, output_file = 'SmartEDA_cluster1.html4')
create_report(cluster2_target, output_file = 'SmartEDA_cluster2.html4')
# Make statistical tests
cluster1_target = data.frame(dd[which(c2 == 1),])
cluster2_target = data.frame(dd[which(c2 == 2),])
summary(cluster1_target)
summary(cluster2_target)
library(DataExplorer)
create_report(cluster1_target, output_file = 'SmartEDA_cluster1.html4')
create_report(cluster2_target, output_file = 'SmartEDA_cluster2.html4')
# Check which variables are significant (use kruskal.test for numeric)
kruskal.test(credit ~ c2)
kruskal.test(loan ~ c2)
# Chunk 1
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
# Chunk 2
dd <- read.csv("2.Bank_India_preprocessed_data.csv", sep=",",
stringsAsFactors=TRUE)
dd$id <- NULL
class(dd)
attach(dd)
dcon <- data.frame(n_child, income, credit, loan, price, age, job_duration,
n_enquiries)
dim(dcon)
# Chunk 3
d  <- dist(dcon[1:50,])
h1 <- hclust(d,method="ward.D")  # NOTICE THE COST
plot(h1)
d  <- dist(dcon)
h1 <- hclust(d,method="ward")  # NOTICE THE COST
plot(h1)
# Chunk 4
nc = 3
c1 <- cutree(h1,nc)
c1[1:20]
nc = 5
c5 <- cutree(h1,nc)
c5[1:20]
table(c1)
table(c5)
table(c1,c5)
cdg <- aggregate(as.data.frame(dcon),list(c1),mean)
cdg
plot(cdg[,1], cdg[,7])
# Chunk 5
plot(Edad,Estalvi,col=c1,main="Clustering of credit data in 3 classes")
for(k in 1:K){
if (is.numeric(dades[,k])){
print(paste("Anàlisi per classes de la Variable:", names(dades)[k]))
boxplot(dades[,k]~P, main=paste("Boxplot of", names(dades)[k], "vs", nameP ), horizontal=TRUE)
barplot(tapply(dades[[k]], P, mean),main=paste("Means of", names(dades)[k], "by", nameP ))
abline(h=mean(dades[[k]]))
legend(0,mean(dades[[k]]),"global mean",bty="n")
print("Estadístics per groups:")
for(s in levels(as.factor(P))) {print(summary(dades[P==s,k]))}
o<-oneway.test(dades[,k]~P)
print(paste("p-valueANOVA:", o$p.value))
kw<-kruskal.test(dades[,k]~P)
print(paste("p-value Kruskal-Wallis:", kw$p.value))
pvalk[,k]<-ValorTestXnum(dades[,k], P)
print("p-values ValorsTest: ")
print(pvalk[,k])
}else{
if(class(dd[,k])=="Date"){
print(summary(dd[,k]))
print(sd(dd[,k]))
#decide breaks: weeks, months, quarters...
hist(dd[,k],breaks="weeks")
}else{
#qualitatives
print(paste("Variable", names(dades)[k]))
table<-table(P, dades[,k])
#   print("Cross-table")
#   print(table)
rowperc<-prop.table(table,1)
colperc<-prop.table(table,2)
#  print("Distribucions condicionades a files")
# print(rowperc)
#ojo porque si la variable es true o false la identifica amb el tipus Logical i
#aquest no te levels, por tanto, coertion preventiva
dades[,k]<-as.factor(dades[,k])
marg <- table(as.factor(P))/n
print(append("Categories=",levels(as.factor(dades[,k]))))
#from next plots, select one of them according to your practical case
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(colperc[,c],col=paleta[c]) }
#with legend
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(colperc[,c],col=paleta[c]) }
legend("topright", levels(dades[,k]), col=paleta, lty=2, cex=0.6)
#condicionades a classes
print(append("Categories=",levels(dades[,k])))
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(rowperc[,c],col=paleta[c]) }
#with legend
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(rowperc[,c],col=paleta[c]) }
legend("topright", levels(dades[,k]), col=paleta, lty=2, cex=0.6)
#amb variable en eix d'abcisses
marg <-table(dades[,k])/n
print(append("Categories=",levels(dades[,k])))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
#x<-plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), xaxt="n")
#text(x=x+.25, y=-1, adj=1, levels(CountryName), xpd=TRUE, srt=25, cex=0.7)
paleta<-rainbow(length(levels(as.factor(P))))
for(c in 1:length(levels(as.factor(P)))){lines(rowperc[c,],col=paleta[c]) }
#with legend
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
for(c in 1:length(levels(as.factor(P)))){lines(rowperc[c,],col=paleta[c])}
legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
#condicionades a columna
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
paleta<-rainbow(length(levels(as.factor(P))))
for(c in 1:length(levels(as.factor(P)))){lines(colperc[c,],col=paleta[c]) }
#with legend
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
for(c in 1:length(levels(as.factor(P)))){lines(colperc[c,],col=paleta[c])}
legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
table<-table(dades[,k],P)
print("Cross Table:")
print(table)
print("Distribucions condicionades a columnes:")
print(colperc)
#diagrames de barres apilades
paleta<-rainbow(length(levels(dades[,k])))
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
#diagrames de barres adosades
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta )
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta)
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
print("Test Chi quadrat: ")
print(chisq.test(dades[,k], as.factor(P)))
print("valorsTest:")
print( ValorTestXquali(P,dades[,k]))
#calcular els pvalues de les quali
}
}
}#endfor
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
dd <- read.csv("2.Bank_India_preprocessed_data.csv", sep=",",
stringsAsFactors=TRUE)
dd$id <- NULL
class(dd)
attach(dd)
dcon <- data.frame(n_child, income, credit, loan, price, age, job_duration,
n_enquiries)
dim(dcon)
d  <- dist(dcon[1:50,])
h1 <- hclust(d,method="ward.D")  # NOTICE THE COST
plot(h1)
d  <- dist(dcon)
h1 <- hclust(d,method="ward")  # NOTICE THE COST
#plot(h1)
nc = 3
c1 <- cutree(h1,nc)
c1[1:20]
nc = 5
c5 <- cutree(h1,nc)
c5[1:20]
table(c1)
table(c5)
table(c1,c5)
cdg <- aggregate(as.data.frame(dcon),list(c1),mean)
cdg
plot(cdg[,1], cdg[,7])
plot(Edad,Estalvi,col=c1,main="Clustering of credit data in 3 classes")
Bss <- sum(rowSums(cdg^2)*as.numeric(table(c1)))
Ib4 <- 100*Bss/Tss
library(cluster)
#dissimilarity matrix
actives<-c(1:19) # We have already removed the id variables
# gower distance
dissimMatrix <- daisy(dd[,actives], metric = "gower", stand=TRUE)
distMatrix<-dissimMatrix^2
# ward method
set.seed(123)
h1 <- hclust(distMatrix,method="ward.D")  # NOTICE THE COST
#plot(h1)
c2 <- cutree(h1,2)
dd <- read.csv("2.Bank_India_preprocessed_data.csv", sep=",",
stringsAsFactors=TRUE)
dd$id <- NULL
class(dd)
attach(dd)
dcon <- data.frame(n_child, income, credit, loan, price, age, job_duration,
n_enquiries)
dim(dcon)
#Dictamen    <- as.factor(Dictamen)
#levels(Dictamen) <- c(NA, "positiu","negatiu")
#Calcula els valor test de la variable Xnum per totes les modalitats del factor P
ValorTestXnum <- function(Xnum,P){
#freq dis of fac
nk <- as.vector(table(P));
n <- sum(nk);
#mitjanes x grups
xk <- tapply(Xnum,P,mean);
#valors test
txk <- (xk-mean(Xnum))/(sd(Xnum)*sqrt((n-nk)/(n*nk)));
#p-values
pxk <- pt(txk,n-1,lower.tail=F);
for(c in 1:length(levels(as.factor(P)))){if (pxk[c]>0.5){pxk[c]<-1-pxk[c]}}
return (pxk)
}
ValorTestXquali <- function(P,Xquali){
taula <- table(P,Xquali);
n <- sum(taula);
pk <- apply(taula,1,sum)/n;
pj <- apply(taula,2,sum)/n;
pf <- taula/(n*pk);
pjm <- matrix(data=pj,nrow=dim(pf)[1],ncol=dim(pf)[2], byrow=TRUE);
dpf <- pf - pjm;
dvt <- sqrt(((1-pk)/(n*pk))%*%t(pj*(1-pj)));
#i hi ha divisions iguals a 0 dona NA i no funciona
zkj <- dpf
zkj[dpf!=0]<-dpf[dpf!=0]/dvt[dpf!=0];
pzkj <- pnorm(zkj,lower.tail=F);
for(c in 1:length(levels(as.factor(P)))){for (s in 1:length(levels(Xquali))){if (pzkj[c,s]> 0.5){pzkj[c,s]<-1- pzkj[c,s]}}}
return (list(rowpf=pf,vtest=zkj,pval=pzkj))
}
#source("file")
#dades contain the dataset
dades<-dd
#dades<-dd[filtro,]
#dades<-df
K<-dim(dades)[2]
#par(ask=TRUE)
#P must contain the class variable
#P<-dd[,3]
P<-c2 #P CONTAINS THE NUMBER OF CUTS WE DO ON THE TREE
#P<-dd[,18]
nameP<-"classe"
#P<-df[,33]
nc<-length(levels(factor(P)))
nc
pvalk <- matrix(data=0,nrow=nc,ncol=K, dimnames=list(levels(P),names(dades)))
nameP<-"Class"
n<-dim(dades)[1]
for(k in 1:K){
if (is.numeric(dades[,k])){
print(paste("Anàlisi per classes de la Variable:", names(dades)[k]))
boxplot(dades[,k]~P, main=paste("Boxplot of", names(dades)[k], "vs", nameP ), horizontal=TRUE)
barplot(tapply(dades[[k]], P, mean),main=paste("Means of", names(dades)[k], "by", nameP ))
abline(h=mean(dades[[k]]))
legend(0,mean(dades[[k]]),"global mean",bty="n")
print("Estadístics per groups:")
for(s in levels(as.factor(P))) {print(summary(dades[P==s,k]))}
o<-oneway.test(dades[,k]~P)
print(paste("p-valueANOVA:", o$p.value))
kw<-kruskal.test(dades[,k]~P)
print(paste("p-value Kruskal-Wallis:", kw$p.value))
pvalk[,k]<-ValorTestXnum(dades[,k], P)
print("p-values ValorsTest: ")
print(pvalk[,k])
}else{
if(class(dd[,k])=="Date"){
print(summary(dd[,k]))
print(sd(dd[,k]))
#decide breaks: weeks, months, quarters...
hist(dd[,k],breaks="weeks")
}else{
#qualitatives
print(paste("Variable", names(dades)[k]))
table<-table(P, dades[,k])
#   print("Cross-table")
#   print(table)
rowperc<-prop.table(table,1)
colperc<-prop.table(table,2)
#  print("Distribucions condicionades a files")
# print(rowperc)
#ojo porque si la variable es true o false la identifica amb el tipus Logical i
#aquest no te levels, por tanto, coertion preventiva
dades[,k]<-as.factor(dades[,k])
marg <- table(as.factor(P))/n
print(append("Categories=",levels(as.factor(dades[,k]))))
#from next plots, select one of them according to your practical case
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(colperc[,c],col=paleta[c]) }
#with legend
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(colperc[,c],col=paleta[c]) }
legend("topright", levels(dades[,k]), col=paleta, lty=2, cex=0.6)
#condicionades a classes
print(append("Categories=",levels(dades[,k])))
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(rowperc[,c],col=paleta[c]) }
#with legend
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(rowperc[,c],col=paleta[c]) }
legend("topright", levels(dades[,k]), col=paleta, lty=2, cex=0.6)
#amb variable en eix d'abcisses
marg <-table(dades[,k])/n
print(append("Categories=",levels(dades[,k])))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
#x<-plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), xaxt="n")
#text(x=x+.25, y=-1, adj=1, levels(CountryName), xpd=TRUE, srt=25, cex=0.7)
paleta<-rainbow(length(levels(as.factor(P))))
for(c in 1:length(levels(as.factor(P)))){lines(rowperc[c,],col=paleta[c]) }
#with legend
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
for(c in 1:length(levels(as.factor(P)))){lines(rowperc[c,],col=paleta[c])}
legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
#condicionades a columna
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
paleta<-rainbow(length(levels(as.factor(P))))
for(c in 1:length(levels(as.factor(P)))){lines(colperc[c,],col=paleta[c]) }
#with legend
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
for(c in 1:length(levels(as.factor(P)))){lines(colperc[c,],col=paleta[c])}
legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
table<-table(dades[,k],P)
print("Cross Table:")
print(table)
print("Distribucions condicionades a columnes:")
print(colperc)
#diagrames de barres apilades
paleta<-rainbow(length(levels(dades[,k])))
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
#diagrames de barres adosades
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta )
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta)
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
print("Test Chi quadrat: ")
print(chisq.test(dades[,k], as.factor(P)))
print("valorsTest:")
print( ValorTestXquali(P,dades[,k]))
#calcular els pvalues de les quali
}
}
}#endfor
#descriptors de les classes més significatius. Afegir info qualits
for (c in 1:length(levels(as.factor(P)))) {
if(!is.na(levels(as.factor(P))[c])){
print(paste("P.values per class:",levels(as.factor(P))[c]));
print(sort(pvalk[c,]), digits=3)
}
}
#afegir la informacio de les modalitats de les qualitatives a la llista de pvalues i fer ordenacio global
#saving the dataframe in an external file
#write.table(dd, file = "credscoClean.csv", sep = ";", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
# Check which variables are significant (use kruskal.test for numeric)
kruskal.test(job_duration ~ c2)
library(car)
df <- read.csv("2. Bank-India-preprocessed-data.csv")
data = df
for (i in c(2:5,11:14,17:18,20)) {
data[,i] <- factor(data[,i])
}
summary(data)
# Here we can see the output of the PCA
numeriques <- which(sapply(data,is.numeric))
# We don't include id for the analysis
numeriques = numeriques[-1]
dcon <- data[,numeriques]
sapply(dcon,class)
pc1 <- prcomp(dcon, scale=TRUE)
pc1
numeriques
barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Analysis of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Cumulative total inertia (%)")
abline(80,0, col = "blue", lwd = 2, lty = 2)
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
library(car)
df <- read.csv("2. Bank-India-preprocessed-data.csv")
data = df
for (i in c(2:5,11:14,17:18,20)) {
data[,i] <- factor(data[,i])
}
summary(data)
df <- read.csv("2. Bank-India-preprocessed-data.csv")
data = df
for (i in c(2:5,11:14,17:18,20)) {
data[,i] <- factor(data[,i])
}
summary(data)
